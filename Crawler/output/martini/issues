[
  {
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "",
    "closed_at": null,
    "comments": 0,
    "comments_url": "https://api.github.com/repos/go-martini/martini/issues/420/comments",
    "created_at": "2020-02-22T00:44:14Z",
    "events_url": "https://api.github.com/repos/go-martini/martini/issues/420/events",
    "html_url": "https://github.com/go-martini/martini/pull/420",
    "id": 569251919,
    "labels": [],
    "labels_url": "https://api.github.com/repos/go-martini/martini/issues/420/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDExOlB1bGxSZXF1ZXN0Mzc4NTI4NDc2",
    "number": 420,
    "pull_request": {
      "diff_url": "https://github.com/go-martini/martini/pull/420.diff",
      "html_url": "https://github.com/go-martini/martini/pull/420",
      "patch_url": "https://github.com/go-martini/martini/pull/420.patch",
      "url": "https://api.github.com/repos/go-martini/martini/pulls/420"
    },
    "repository_url": "https://api.github.com/repos/go-martini/martini",
    "state": "open",
    "title": "Fix typos in Portuguese README",
    "updated_at": "2020-02-22T00:44:14Z",
    "url": "https://api.github.com/repos/go-martini/martini/issues/420",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/1292556?v=4",
      "events_url": "https://api.github.com/users/vbrazo/events{/privacy}",
      "followers_url": "https://api.github.com/users/vbrazo/followers",
      "following_url": "https://api.github.com/users/vbrazo/following{/other_user}",
      "gists_url": "https://api.github.com/users/vbrazo/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vbrazo",
      "id": 1292556,
      "login": "vbrazo",
      "node_id": "MDQ6VXNlcjEyOTI1NTY=",
      "organizations_url": "https://api.github.com/users/vbrazo/orgs",
      "received_events_url": "https://api.github.com/users/vbrazo/received_events",
      "repos_url": "https://api.github.com/users/vbrazo/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vbrazo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vbrazo/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vbrazo"
    }
  },
  {
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "I have this:\r\n\r\n```golang\r\nIf my server handles a request and writes the response code as being greater than 399, I want to log an error trace:\r\n\r\n    \tbm.Use(func(res http.ResponseWriter, req *http.Request, c martini.Context, log *logging.Logger, statter statsd.Statter) {\r\n    \r\n    \t\tstart := time.Now()\r\n    \r\n    \t\trw := res.(martini.ResponseWriter)\r\n    \r\n    \t\tc.Next()  // do all the middleware handler stuff\r\n    \r\n    \t\tif res.(martini.ResponseWriter).Status() > 399 {\r\n    \t\t\tlog.Warning(\"%v\", \"print response here\")  // how to read response here\r\n    \t\t}\r\n    \r\n    })\r\n```\r\n\r\nis there a way to read the response, given the status code? If we send an error back to the client, how can I intercept the error message and log it?\r\n\r\nfor example, if we use:\r\n\r\n```golang\r\nfunc (ctr *TagsController) DeleteTags(c *common.Context, user *common.User, org *common.Organization, req *http.Request, params martini.Params) (int, interface{}) {\r\n\r\n\ttagName, hasTag := params[\"tag\"]\r\n\r\n\tif !hasTag {\r\n                 var XXX = errors.New(\"missing tag: no tag param to update\")\r\n\t\treturn 422, ctr.ErrorResponse(422, XXX)\r\n\t}\r\n\r\n}\r\n```\r\n\r\nI would want to log XXX from the final martini middleware, since the status code is greater than 399.  How to do this?\r\n\r\nFurthermore, it would be nice to send in private/public logging - the client message and the error message. Using Node.js express we could do this:\r\n\r\n\r\n```js\r\napp.use((req,res,next) => {\r\n    next(new Error('oh shit'));\r\n});\r\n\r\napp.use((err,req,res,next) => {\r\n   log.error(err);   // the stack trace is logged\r\n   res.send(err.message);  // the client only sees the message, not the stack trace\r\n});\r\n```\r\n\r\nis there a way to send the client a different message, but still hook into the error object so we can log it easily instead of having to log it manually everywhere?\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "closed_at": null,
    "comments": 1,
    "comments_url": "https://api.github.com/repos/go-martini/martini/issues/419/comments",
    "created_at": "2020-02-12T01:02:03Z",
    "events_url": "https://api.github.com/repos/go-martini/martini/issues/419/events",
    "html_url": "https://github.com/go-martini/martini/issues/419",
    "id": 563661735,
    "labels": [],
    "labels_url": "https://api.github.com/repos/go-martini/martini/issues/419/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU1NjM2NjE3MzU=",
    "number": 419,
    "repository_url": "https://api.github.com/repos/go-martini/martini",
    "state": "open",
    "title": "Hook to log errors if status code > 399",
    "updated_at": "2020-02-12T18:30:56Z",
    "url": "https://api.github.com/repos/go-martini/martini/issues/419",
    "user": {
      "avatar_url": "https://avatars1.githubusercontent.com/u/11139560?v=4",
      "events_url": "https://api.github.com/users/ORESoftware/events{/privacy}",
      "followers_url": "https://api.github.com/users/ORESoftware/followers",
      "following_url": "https://api.github.com/users/ORESoftware/following{/other_user}",
      "gists_url": "https://api.github.com/users/ORESoftware/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/ORESoftware",
      "id": 11139560,
      "login": "ORESoftware",
      "node_id": "MDQ6VXNlcjExMTM5NTYw",
      "organizations_url": "https://api.github.com/users/ORESoftware/orgs",
      "received_events_url": "https://api.github.com/users/ORESoftware/received_events",
      "repos_url": "https://api.github.com/users/ORESoftware/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/ORESoftware/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ORESoftware/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/ORESoftware"
    }
  },
  {
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "Every exported function in a program should have a doc comment. The first sentence should be a summary that starts with the name being declared.\r\nFrom [effective go](https://golang.org/doc/effective_go.html#commentary).\r\n\r\n\r\nPR generated by [CodeLingo](https://codelingo.io). [Install here](https://github.com/apps/codelingo) to drive Continuous Higher Standards.\r\n",
    "closed_at": null,
    "comments": 1,
    "comments_url": "https://api.github.com/repos/go-martini/martini/issues/418/comments",
    "created_at": "2019-02-13T00:05:10Z",
    "events_url": "https://api.github.com/repos/go-martini/martini/issues/418/events",
    "html_url": "https://github.com/go-martini/martini/pull/418",
    "id": 409559942,
    "labels": [],
    "labels_url": "https://api.github.com/repos/go-martini/martini/issues/418/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjUyNTE1ODY0",
    "number": 418,
    "pull_request": {
      "diff_url": "https://github.com/go-martini/martini/pull/418.diff",
      "html_url": "https://github.com/go-martini/martini/pull/418",
      "patch_url": "https://github.com/go-martini/martini/pull/418.patch",
      "url": "https://api.github.com/repos/go-martini/martini/pulls/418"
    },
    "repository_url": "https://api.github.com/repos/go-martini/martini",
    "state": "open",
    "title": "\nFix function comments based on best practices from Effective Go\n",
    "updated_at": "2019-02-13T00:22:11Z",
    "url": "https://api.github.com/repos/go-martini/martini/issues/418",
    "user": {
      "avatar_url": "https://avatars1.githubusercontent.com/u/45469328?v=4",
      "events_url": "https://api.github.com/users/CodeLingoBot/events{/privacy}",
      "followers_url": "https://api.github.com/users/CodeLingoBot/followers",
      "following_url": "https://api.github.com/users/CodeLingoBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeLingoBot/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/CodeLingoBot",
      "id": 45469328,
      "login": "CodeLingoBot",
      "node_id": "MDQ6VXNlcjQ1NDY5MzI4",
      "organizations_url": "https://api.github.com/users/CodeLingoBot/orgs",
      "received_events_url": "https://api.github.com/users/CodeLingoBot/received_events",
      "repos_url": "https://api.github.com/users/CodeLingoBot/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/CodeLingoBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeLingoBot/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/CodeLingoBot"
    }
  },
  {
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "`InstrumentHandlerResponseSize func(obs prometheus.ObserverVec, next http.Handler) http.Handler` from the `promhttp` package takes in \"http.Handler\" and returns a \"http.Handler\" for instrumenting the response size. However, martini only has `martini.Handler` which makes it impossible to pass into the promhttp instrumentation function, I'm wondering if it's possible to use martini with prometheus `promhttp`?",
    "closed_at": null,
    "comments": 2,
    "comments_url": "https://api.github.com/repos/go-martini/martini/issues/417/comments",
    "created_at": "2018-11-28T20:56:08Z",
    "events_url": "https://api.github.com/repos/go-martini/martini/issues/417/events",
    "html_url": "https://github.com/go-martini/martini/issues/417",
    "id": 385453171,
    "labels": [],
    "labels_url": "https://api.github.com/repos/go-martini/martini/issues/417/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWUzODU0NTMxNzE=",
    "number": 417,
    "repository_url": "https://api.github.com/repos/go-martini/martini",
    "state": "open",
    "title": "Add support for promhttp ",
    "updated_at": "2019-04-03T11:54:42Z",
    "url": "https://api.github.com/repos/go-martini/martini/issues/417",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/13610813?v=4",
      "events_url": "https://api.github.com/users/jeffreyyong/events{/privacy}",
      "followers_url": "https://api.github.com/users/jeffreyyong/followers",
      "following_url": "https://api.github.com/users/jeffreyyong/following{/other_user}",
      "gists_url": "https://api.github.com/users/jeffreyyong/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jeffreyyong",
      "id": 13610813,
      "login": "jeffreyyong",
      "node_id": "MDQ6VXNlcjEzNjEwODEz",
      "organizations_url": "https://api.github.com/users/jeffreyyong/orgs",
      "received_events_url": "https://api.github.com/users/jeffreyyong/received_events",
      "repos_url": "https://api.github.com/users/jeffreyyong/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jeffreyyong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jeffreyyong/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jeffreyyong"
    }
  },
  {
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "how can i run the Unit Test ?  when i run the Unit Test, and i use the goland, i had set GOPATH  \r\n# command-line-arguments\r\n.\\env_test.go:18:3: undefined: setENV\r\n.\\env_test.go:19:6: undefined: Env\r\n.\\env_test.go:20:4: undefined: expect\r\n.\\env_test.go:20:14: undefined: Env\r\n.\\env_test.go:26:9: undefined: Root\r\n",
    "closed_at": null,
    "comments": 1,
    "comments_url": "https://api.github.com/repos/go-martini/martini/issues/416/comments",
    "created_at": "2018-05-17T12:36:08Z",
    "events_url": "https://api.github.com/repos/go-martini/martini/issues/416/events",
    "html_url": "https://github.com/go-martini/martini/issues/416",
    "id": 324003785,
    "labels": [],
    "labels_url": "https://api.github.com/repos/go-martini/martini/issues/416/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWUzMjQwMDM3ODU=",
    "number": 416,
    "repository_url": "https://api.github.com/repos/go-martini/martini",
    "state": "open",
    "title": "Unit Test",
    "updated_at": "2018-06-27T09:49:00Z",
    "url": "https://api.github.com/repos/go-martini/martini/issues/416",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/10724270?v=4",
      "events_url": "https://api.github.com/users/kejie1235/events{/privacy}",
      "followers_url": "https://api.github.com/users/kejie1235/followers",
      "following_url": "https://api.github.com/users/kejie1235/following{/other_user}",
      "gists_url": "https://api.github.com/users/kejie1235/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/kejie1235",
      "id": 10724270,
      "login": "kejie1235",
      "node_id": "MDQ6VXNlcjEwNzI0Mjcw",
      "organizations_url": "https://api.github.com/users/kejie1235/orgs",
      "received_events_url": "https://api.github.com/users/kejie1235/received_events",
      "repos_url": "https://api.github.com/users/kejie1235/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/kejie1235/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kejie1235/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/kejie1235"
    }
  },
  {
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "\u8bf7\u95ee\u4e0b\uff0c\u6211\u8fd0\u884c\u5355\u5143\u6d4b\u8bd5\u3002\u4f46\u662f\u62a5\u9519\u90a3\u4e9b\u88ab\u6d4b\u7684\u6587\u4ef6\u51fd\u6570\u548c\u53d8\u91cf\u6ca1\u6709\u5b9a\u4e49\uff0c\u8bf7\u95ee\u8be5\u600e\u4e48\u89e3\u51b3\uff1f",
    "closed_at": null,
    "comments": 0,
    "comments_url": "https://api.github.com/repos/go-martini/martini/issues/415/comments",
    "created_at": "2018-05-14T12:37:08Z",
    "events_url": "https://api.github.com/repos/go-martini/martini/issues/415/events",
    "html_url": "https://github.com/go-martini/martini/issues/415",
    "id": 322798030,
    "labels": [],
    "labels_url": "https://api.github.com/repos/go-martini/martini/issues/415/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWUzMjI3OTgwMzA=",
    "number": 415,
    "repository_url": "https://api.github.com/repos/go-martini/martini",
    "state": "open",
    "title": "unit",
    "updated_at": "2018-05-14T12:37:08Z",
    "url": "https://api.github.com/repos/go-martini/martini/issues/415",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/10724270?v=4",
      "events_url": "https://api.github.com/users/kejie1235/events{/privacy}",
      "followers_url": "https://api.github.com/users/kejie1235/followers",
      "following_url": "https://api.github.com/users/kejie1235/following{/other_user}",
      "gists_url": "https://api.github.com/users/kejie1235/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/kejie1235",
      "id": 10724270,
      "login": "kejie1235",
      "node_id": "MDQ6VXNlcjEwNzI0Mjcw",
      "organizations_url": "https://api.github.com/users/kejie1235/orgs",
      "received_events_url": "https://api.github.com/users/kejie1235/received_events",
      "repos_url": "https://api.github.com/users/kejie1235/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/kejie1235/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kejie1235/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/kejie1235"
    }
  },
  {
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "I'd like to use [render.Render](https://github.com/martini-contrib/render) in a custom ReturnHandler, but I'm not sure how get access to to it. Any help would be appreciated.",
    "closed_at": null,
    "comments": 0,
    "comments_url": "https://api.github.com/repos/go-martini/martini/issues/414/comments",
    "created_at": "2017-08-28T19:59:07Z",
    "events_url": "https://api.github.com/repos/go-martini/martini/issues/414/events",
    "html_url": "https://github.com/go-martini/martini/issues/414",
    "id": 253438523,
    "labels": [],
    "labels_url": "https://api.github.com/repos/go-martini/martini/issues/414/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWUyNTM0Mzg1MjM=",
    "number": 414,
    "repository_url": "https://api.github.com/repos/go-martini/martini",
    "state": "open",
    "title": "Use render.Render in ReturnHandler",
    "updated_at": "2017-08-28T19:59:07Z",
    "url": "https://api.github.com/repos/go-martini/martini/issues/414",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/193116?v=4",
      "events_url": "https://api.github.com/users/aedenj/events{/privacy}",
      "followers_url": "https://api.github.com/users/aedenj/followers",
      "following_url": "https://api.github.com/users/aedenj/following{/other_user}",
      "gists_url": "https://api.github.com/users/aedenj/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/aedenj",
      "id": 193116,
      "login": "aedenj",
      "node_id": "MDQ6VXNlcjE5MzExNg==",
      "organizations_url": "https://api.github.com/users/aedenj/orgs",
      "received_events_url": "https://api.github.com/users/aedenj/received_events",
      "repos_url": "https://api.github.com/users/aedenj/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/aedenj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aedenj/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/aedenj"
    }
  }
]