[
  {
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "Running a binary built with Go 1.14 and the async preemption causes significant slowdown on MacOS (see https://github.com/golang/go/issues/37528). We already disable this by default on Windows, so I don't think it would hurt to also disable on MacOS.",
    "closed_at": null,
    "comments": 3,
    "comments_url": "https://api.github.com/repos/go-delve/delve/issues/1905/comments",
    "created_at": "2020-02-28T22:47:30Z",
    "events_url": "https://api.github.com/repos/go-delve/delve/issues/1905/events",
    "html_url": "https://github.com/go-delve/delve/issues/1905",
    "id": 573048288,
    "labels": [],
    "labels_url": "https://api.github.com/repos/go-delve/delve/issues/1905/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU1NzMwNDgyODg=",
    "number": 1905,
    "repository_url": "https://api.github.com/repos/go-delve/delve",
    "state": "open",
    "title": "Turn off asyncpreempt on MacOS",
    "updated_at": "2020-03-01T10:26:40Z",
    "url": "https://api.github.com/repos/go-delve/delve/issues/1905",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/1314079?v=4",
      "events_url": "https://api.github.com/users/derekparker/events{/privacy}",
      "followers_url": "https://api.github.com/users/derekparker/followers",
      "following_url": "https://api.github.com/users/derekparker/following{/other_user}",
      "gists_url": "https://api.github.com/users/derekparker/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/derekparker",
      "id": 1314079,
      "login": "derekparker",
      "node_id": "MDQ6VXNlcjEzMTQwNzk=",
      "organizations_url": "https://api.github.com/users/derekparker/orgs",
      "received_events_url": "https://api.github.com/users/derekparker/received_events",
      "repos_url": "https://api.github.com/users/derekparker/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/derekparker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/derekparker/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/derekparker"
    }
  },
  {
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "This change also:\r\n-- refactors building helper functions from commands.go into its own gobuild package.\r\n-- makes processing untyped launch args (that are implementation-specific and not part of the DAP spec) more robust, verified by additional tests",
    "closed_at": null,
    "comments": 0,
    "comments_url": "https://api.github.com/repos/go-delve/delve/issues/1901/comments",
    "created_at": "2020-02-28T18:00:13Z",
    "events_url": "https://api.github.com/repos/go-delve/delve/issues/1901/events",
    "html_url": "https://github.com/go-delve/delve/pull/1901",
    "id": 572914838,
    "labels": [],
    "labels_url": "https://api.github.com/repos/go-delve/delve/issues/1901/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzgxNTIwMjcw",
    "number": 1901,
    "pull_request": {
      "diff_url": "https://github.com/go-delve/delve/pull/1901.diff",
      "html_url": "https://github.com/go-delve/delve/pull/1901",
      "patch_url": "https://github.com/go-delve/delve/pull/1901.patch",
      "url": "https://api.github.com/repos/go-delve/delve/pulls/1901"
    },
    "repository_url": "https://api.github.com/repos/go-delve/delve",
    "state": "open",
    "title": "service/dap: Add support for debug and test modes",
    "updated_at": "2020-03-01T10:12:05Z",
    "url": "https://api.github.com/repos/go-delve/delve/issues/1901",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/51177946?v=4",
      "events_url": "https://api.github.com/users/polinasok/events{/privacy}",
      "followers_url": "https://api.github.com/users/polinasok/followers",
      "following_url": "https://api.github.com/users/polinasok/following{/other_user}",
      "gists_url": "https://api.github.com/users/polinasok/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/polinasok",
      "id": 51177946,
      "login": "polinasok",
      "node_id": "MDQ6VXNlcjUxMTc3OTQ2",
      "organizations_url": "https://api.github.com/users/polinasok/orgs",
      "received_events_url": "https://api.github.com/users/polinasok/received_events",
      "repos_url": "https://api.github.com/users/polinasok/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/polinasok/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/polinasok/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/polinasok"
    }
  },
  {
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "```\nproc/gdbserial,debugger: allow clients to stop a recording\n\nAllows Delve clients to stop a recording midway by sending a Command('halt')\nrequest.\n\nThis is implemented by changing debugger.New to start recording the process\non a separate goroutine while holding the processMutex locked. By locking\nthe processMutex we ensure that almost all RPC requests will block until the\nrecording is done, since we can not respond correctly to any of them.\nAPI calls that do not require manipulating or examining the target process,\nsuch as \"IsMulticlient\", \"SetApiVersion\" and \"GetState(nowait=true)\" will\nwork while we are recording the process.\n\nTwo other internal changes are made to the API: both GetState and Restart\nbecome asynchronous requests, like Command. Restart because this way it can\nbe interrupted by a Command(halt) request if the rerecord option is passed.\nGetState because clients need a call that will block until the recording is\ncompelted and can also be interrupted with a Command(halt)\n\nClients that are uninterested in allowing the user to stop a recording can\nignore this change, since eventually they will make a request to Delve that\nwill block until the recording is completed.\n\nClients that wish to support this feature must:\n\n1. call GetState(nowait=false) after connecting to Delve, before any call\nthat would need to manipulate the target process\n2. allow the user to send a Command(halt) request during the initial\nGetState call\n3. allow the user to send a Command(halt) request during any subsequent\nRestart(rerecord=true) request (if supported).\n\nImplements #1747\n\n```\n",
    "closed_at": null,
    "comments": 6,
    "comments_url": "https://api.github.com/repos/go-delve/delve/issues/1890/comments",
    "created_at": "2020-02-25T08:57:24Z",
    "events_url": "https://api.github.com/repos/go-delve/delve/issues/1890/events",
    "html_url": "https://github.com/go-delve/delve/pull/1890",
    "id": 570409968,
    "labels": [],
    "labels_url": "https://api.github.com/repos/go-delve/delve/issues/1890/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDExOlB1bGxSZXF1ZXN0Mzc5NDQ2Njcz",
    "number": 1890,
    "pull_request": {
      "diff_url": "https://github.com/go-delve/delve/pull/1890.diff",
      "html_url": "https://github.com/go-delve/delve/pull/1890",
      "patch_url": "https://github.com/go-delve/delve/pull/1890.patch",
      "url": "https://api.github.com/repos/go-delve/delve/pulls/1890"
    },
    "repository_url": "https://api.github.com/repos/go-delve/delve",
    "state": "open",
    "title": "proc/gdbserial,debugger: allow clients to stop a recording",
    "updated_at": "2020-03-01T11:24:30Z",
    "url": "https://api.github.com/repos/go-delve/delve/issues/1890",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/303620?v=4",
      "events_url": "https://api.github.com/users/aarzilli/events{/privacy}",
      "followers_url": "https://api.github.com/users/aarzilli/followers",
      "following_url": "https://api.github.com/users/aarzilli/following{/other_user}",
      "gists_url": "https://api.github.com/users/aarzilli/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/aarzilli",
      "id": 303620,
      "login": "aarzilli",
      "node_id": "MDQ6VXNlcjMwMzYyMA==",
      "organizations_url": "https://api.github.com/users/aarzilli/orgs",
      "received_events_url": "https://api.github.com/users/aarzilli/received_events",
      "repos_url": "https://api.github.com/users/aarzilli/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/aarzilli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aarzilli/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/aarzilli"
    }
  },
  {
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "This change makes it easier to get to the process id of the delve server when killing it manually, especially since SIGINT from Ctrl-C gets sent to the debugged process.",
    "closed_at": null,
    "comments": 5,
    "comments_url": "https://api.github.com/repos/go-delve/delve/issues/1885/comments",
    "created_at": "2020-02-21T19:59:18Z",
    "events_url": "https://api.github.com/repos/go-delve/delve/issues/1885/events",
    "html_url": "https://github.com/go-delve/delve/pull/1885",
    "id": 569155766,
    "labels": [],
    "labels_url": "https://api.github.com/repos/go-delve/delve/issues/1885/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDExOlB1bGxSZXF1ZXN0Mzc4NDQ4NzYy",
    "number": 1885,
    "pull_request": {
      "diff_url": "https://github.com/go-delve/delve/pull/1885.diff",
      "html_url": "https://github.com/go-delve/delve/pull/1885",
      "patch_url": "https://github.com/go-delve/delve/pull/1885.patch",
      "url": "https://api.github.com/repos/go-delve/delve/pulls/1885"
    },
    "repository_url": "https://api.github.com/repos/go-delve/delve",
    "state": "open",
    "title": "logflags: Add pid to server-listening-at message",
    "updated_at": "2020-02-24T10:27:28Z",
    "url": "https://api.github.com/repos/go-delve/delve/issues/1885",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/51177946?v=4",
      "events_url": "https://api.github.com/users/polinasok/events{/privacy}",
      "followers_url": "https://api.github.com/users/polinasok/followers",
      "following_url": "https://api.github.com/users/polinasok/following{/other_user}",
      "gists_url": "https://api.github.com/users/polinasok/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/polinasok",
      "id": 51177946,
      "login": "polinasok",
      "node_id": "MDQ6VXNlcjUxMTc3OTQ2",
      "organizations_url": "https://api.github.com/users/polinasok/orgs",
      "received_events_url": "https://api.github.com/users/polinasok/received_events",
      "repos_url": "https://api.github.com/users/polinasok/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/polinasok/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/polinasok/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/polinasok"
    }
  },
  {
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "Implement debugging function for 386 on linux with reference to AMD64.\r\nThere are a few remaining problems that need to be solved in another time.\r\n\r\n1. The stacktrace of cgo are not exactly as expected.\r\n2. Not implement `core` for now.\r\n3. Not implement `call` for now. Can't not find `runtime\u00b7debugCallV1` or\r\n   similar function in $GOROOT/src/runtime/asm_386.s.\r\n\r\nUpdate #20\r\n\r\n------------------\r\n\r\nTestcase pass on go1.13.6 linux/386 for me. (Skip some cases referred problems above ).\r\n\r\nBut when I want to add `arch 386` into .travis.yml to run ci, I find [Add 32-bit environments](github.com/travis-ci/travis-ci/issues/986) and [32 bit versions of linux images](https://github.com/travis-ci/travis-ci/issues/5770).  It looks travis doesn't support 32bit directly.\r\n\r\nI can close this pr if dlv will not support 32 bit.\r\n",
    "closed_at": null,
    "comments": 3,
    "comments_url": "https://api.github.com/repos/go-delve/delve/issues/1884/comments",
    "created_at": "2020-02-21T16:56:29Z",
    "events_url": "https://api.github.com/repos/go-delve/delve/issues/1884/events",
    "html_url": "https://github.com/go-delve/delve/pull/1884",
    "id": 569071017,
    "labels": [],
    "labels_url": "https://api.github.com/repos/go-delve/delve/issues/1884/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDExOlB1bGxSZXF1ZXN0Mzc4Mzc4MzMw",
    "number": 1884,
    "pull_request": {
      "diff_url": "https://github.com/go-delve/delve/pull/1884.diff",
      "html_url": "https://github.com/go-delve/delve/pull/1884",
      "patch_url": "https://github.com/go-delve/delve/pull/1884.patch",
      "url": "https://api.github.com/repos/go-delve/delve/pulls/1884"
    },
    "repository_url": "https://api.github.com/repos/go-delve/delve",
    "state": "open",
    "title": "pkg,service: support 386 on linux",
    "updated_at": "2020-02-29T06:01:27Z",
    "url": "https://api.github.com/repos/go-delve/delve/issues/1884",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/7046329?v=4",
      "events_url": "https://api.github.com/users/chainhelen/events{/privacy}",
      "followers_url": "https://api.github.com/users/chainhelen/followers",
      "following_url": "https://api.github.com/users/chainhelen/following{/other_user}",
      "gists_url": "https://api.github.com/users/chainhelen/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/chainhelen",
      "id": 7046329,
      "login": "chainhelen",
      "node_id": "MDQ6VXNlcjcwNDYzMjk=",
      "organizations_url": "https://api.github.com/users/chainhelen/orgs",
      "received_events_url": "https://api.github.com/users/chainhelen/received_events",
      "repos_url": "https://api.github.com/users/chainhelen/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/chainhelen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chainhelen/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/chainhelen"
    }
  },
  {
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "I'm wondering if we could have a mode where delve could act as a transparent middleware so that we could use delve to debug go processes launched by wrappers.\r\n\r\nMy use case is debugging https://github.com/hashicorp/terraform providers.\r\n\r\nTerraform is using a grpc plugins (providers) mechanism.\r\n\r\n - terraform launch the terraform provider as a child process\r\n - terraform provider writes messages to stdout to tell terraform what unix socket they should use to communicate\r\n - terraform and the provider communicates via grpc using the previsouly mentionned unix socket\r\n\r\nThe original process tree looks like this (on MacOS)\r\n\r\n```\r\n | |     \\-+= 71949 s.rabot terraform plan\r\n | |       \\-+- 71952 s.rabot /Users/s.rabot/go/bin/terraform-provider-azurerm\r\n```\r\n\r\nWhat I'm trying to do is insert delve in the middle so that I can debug the provider.\r\n\r\nI managed to tweak terraform to launch its provider **with delve in the middle**.\r\n\r\n```\r\n | |     \\-+= 72120 s.rabot terraform plan\r\n | |       \\-+- 72122 s.rabot /Users/s.rabot/go/bin/dlv exec --headless --listen=127.0.0.1:2346 --api-version=2 -- /Users/s.rabot/go/bin/terraform-provider-azurerm\r\n | |         \\-+= 72123 s.rabot /Library/Developer/CommandLineTools/Library/PrivateFrameworks/LLDB.framework/Versions/A/Resources/debugserver --stdio-path /dev/tty -F -R 127.0.0.1:53363 -- /Users/s.rabot/go/bin/terraform-provider-azurerm\r\n | |           \\--- 72124 s.rabot /Users/s.rabot/go/bin/terraform-provider-azurerm\r\n```\r\n\r\nSo far so good but there are still a problem with standard inputs and outputs. I did not manage with the options to make delve forward `stdin` & `stdout` correctly between the father and the child.\r\n\r\nWhat I would need is a mode where :\r\n\r\n- father stdout -> delve stdin -> child stdin \r\n- child stdout -> delve stdout -> father\r\n- child stderr -> delve stderr -> father\r\n- delve logging into /dev/console or /dev/tty \r\n\r\nRegards.",
    "closed_at": null,
    "comments": 4,
    "comments_url": "https://api.github.com/repos/go-delve/delve/issues/1880/comments",
    "created_at": "2020-02-20T17:15:08Z",
    "events_url": "https://api.github.com/repos/go-delve/delve/issues/1880/events",
    "html_url": "https://github.com/go-delve/delve/issues/1880",
    "id": 568450790,
    "labels": [],
    "labels_url": "https://api.github.com/repos/go-delve/delve/issues/1880/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU1Njg0NTA3OTA=",
    "number": 1880,
    "repository_url": "https://api.github.com/repos/go-delve/delve",
    "state": "open",
    "title": "Transparent middleware mode",
    "updated_at": "2020-02-20T18:35:21Z",
    "url": "https://api.github.com/repos/go-delve/delve/issues/1880",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/153052?v=4",
      "events_url": "https://api.github.com/users/sylr/events{/privacy}",
      "followers_url": "https://api.github.com/users/sylr/followers",
      "following_url": "https://api.github.com/users/sylr/following{/other_user}",
      "gists_url": "https://api.github.com/users/sylr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/sylr",
      "id": 153052,
      "login": "sylr",
      "node_id": "MDQ6VXNlcjE1MzA1Mg==",
      "organizations_url": "https://api.github.com/users/sylr/orgs",
      "received_events_url": "https://api.github.com/users/sylr/received_events",
      "repos_url": "https://api.github.com/users/sylr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/sylr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sylr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/sylr"
    }
  },
  {
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "```\nproc,proc/*: add StopReason field to Target\n\nAdds a StopReason field to the Target object describing why the target\nprocess is currently stopped. This will be useful for the DAP server\n(which needs to report this reason in one of its requests) as well as\nmaking pull request #1785 (reverse step) conformant to the new\narchitecture.\n\nproc,proc/*: move SelectedGoroutine to proc.Target, remove PostInitializationSetup\n\nmoves SelectedGoroutine, SwitchThread and SwitchGoroutine to\nproc.Target, merges PostInitializationSetup with NewTarget.\n\n```\n",
    "closed_at": null,
    "comments": 1,
    "comments_url": "https://api.github.com/repos/go-delve/delve/issues/1877/comments",
    "created_at": "2020-02-20T09:20:29Z",
    "events_url": "https://api.github.com/repos/go-delve/delve/issues/1877/events",
    "html_url": "https://github.com/go-delve/delve/pull/1877",
    "id": 568159163,
    "labels": [],
    "labels_url": "https://api.github.com/repos/go-delve/delve/issues/1877/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDExOlB1bGxSZXF1ZXN0Mzc3NjM5Njcw",
    "number": 1877,
    "pull_request": {
      "diff_url": "https://github.com/go-delve/delve/pull/1877.diff",
      "html_url": "https://github.com/go-delve/delve/pull/1877",
      "patch_url": "https://github.com/go-delve/delve/pull/1877.patch",
      "url": "https://api.github.com/repos/go-delve/delve/pulls/1877"
    },
    "repository_url": "https://api.github.com/repos/go-delve/delve",
    "state": "open",
    "title": "proc,proc/*: add StopReason field to Target",
    "updated_at": "2020-02-20T19:21:03Z",
    "url": "https://api.github.com/repos/go-delve/delve/issues/1877",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/303620?v=4",
      "events_url": "https://api.github.com/users/aarzilli/events{/privacy}",
      "followers_url": "https://api.github.com/users/aarzilli/followers",
      "following_url": "https://api.github.com/users/aarzilli/following{/other_user}",
      "gists_url": "https://api.github.com/users/aarzilli/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/aarzilli",
      "id": 303620,
      "login": "aarzilli",
      "node_id": "MDQ6VXNlcjMwMzYyMA==",
      "organizations_url": "https://api.github.com/users/aarzilli/orgs",
      "received_events_url": "https://api.github.com/users/aarzilli/received_events",
      "repos_url": "https://api.github.com/users/aarzilli/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/aarzilli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aarzilli/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/aarzilli"
    }
  },
  {
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "```\nproc,proc/*: move SelectedGoroutine to proc.Target, remove PostInitializationSetup\n\nmoves SelectedGoroutine, SwitchThread and SwitchGoroutine to\nproc.Target, merges PostInitializationSetup with NewTarget.\n\n```\n",
    "closed_at": null,
    "comments": 0,
    "comments_url": "https://api.github.com/repos/go-delve/delve/issues/1876/comments",
    "created_at": "2020-02-20T08:52:19Z",
    "events_url": "https://api.github.com/repos/go-delve/delve/issues/1876/events",
    "html_url": "https://github.com/go-delve/delve/pull/1876",
    "id": 568143652,
    "labels": [],
    "labels_url": "https://api.github.com/repos/go-delve/delve/issues/1876/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDExOlB1bGxSZXF1ZXN0Mzc3NjI3MDY0",
    "number": 1876,
    "pull_request": {
      "diff_url": "https://github.com/go-delve/delve/pull/1876.diff",
      "html_url": "https://github.com/go-delve/delve/pull/1876",
      "patch_url": "https://github.com/go-delve/delve/pull/1876.patch",
      "url": "https://api.github.com/repos/go-delve/delve/pulls/1876"
    },
    "repository_url": "https://api.github.com/repos/go-delve/delve",
    "state": "open",
    "title": "proc,proc/*: move SelectedGoroutine to proc.Target, remove PostInitializationSetup",
    "updated_at": "2020-02-20T19:07:54Z",
    "url": "https://api.github.com/repos/go-delve/delve/issues/1876",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/303620?v=4",
      "events_url": "https://api.github.com/users/aarzilli/events{/privacy}",
      "followers_url": "https://api.github.com/users/aarzilli/followers",
      "following_url": "https://api.github.com/users/aarzilli/following{/other_user}",
      "gists_url": "https://api.github.com/users/aarzilli/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/aarzilli",
      "id": 303620,
      "login": "aarzilli",
      "node_id": "MDQ6VXNlcjMwMzYyMA==",
      "organizations_url": "https://api.github.com/users/aarzilli/orgs",
      "received_events_url": "https://api.github.com/users/aarzilli/received_events",
      "repos_url": "https://api.github.com/users/aarzilli/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/aarzilli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aarzilli/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/aarzilli"
    }
  },
  {
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "```\nproc/native/linux: do not call (*Thread).Stopped inside (*Process).stop\n\n(*Thread).Stopped is slow because it needs to open, read and parse a\nfile in /proc, we don't actually need to do that, we can just rely on\nthe value of Thread.os.running.\n\nBenchmark before:\n\nBenchmarkConditionalBreakpoints-4              1        12476166303 ns/op\n\nBenchmark after:\n\nBenchmarkConditionalBreakpoints-4   \t       1\t10403533675 ns/op\n\nConditional breakpoint evaluation: 1.24ms -> 1ms\n\nUpdates #1549\n\nproc/native/linux: only set breakpoints on threads that receive SIGTRAP\n\n```\n",
    "closed_at": null,
    "comments": 0,
    "comments_url": "https://api.github.com/repos/go-delve/delve/issues/1874/comments",
    "created_at": "2020-02-20T08:02:00Z",
    "events_url": "https://api.github.com/repos/go-delve/delve/issues/1874/events",
    "html_url": "https://github.com/go-delve/delve/pull/1874",
    "id": 568119482,
    "labels": [],
    "labels_url": "https://api.github.com/repos/go-delve/delve/issues/1874/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDExOlB1bGxSZXF1ZXN0Mzc3NjA3MjY5",
    "number": 1874,
    "pull_request": {
      "diff_url": "https://github.com/go-delve/delve/pull/1874.diff",
      "html_url": "https://github.com/go-delve/delve/pull/1874",
      "patch_url": "https://github.com/go-delve/delve/pull/1874.patch",
      "url": "https://api.github.com/repos/go-delve/delve/pulls/1874"
    },
    "repository_url": "https://api.github.com/repos/go-delve/delve",
    "state": "open",
    "title": "Better native.Process.stop performance for linux backend",
    "updated_at": "2020-02-20T08:02:00Z",
    "url": "https://api.github.com/repos/go-delve/delve/issues/1874",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/303620?v=4",
      "events_url": "https://api.github.com/users/aarzilli/events{/privacy}",
      "followers_url": "https://api.github.com/users/aarzilli/followers",
      "following_url": "https://api.github.com/users/aarzilli/following{/other_user}",
      "gists_url": "https://api.github.com/users/aarzilli/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/aarzilli",
      "id": 303620,
      "login": "aarzilli",
      "node_id": "MDQ6VXNlcjMwMzYyMA==",
      "organizations_url": "https://api.github.com/users/aarzilli/orgs",
      "received_events_url": "https://api.github.com/users/aarzilli/received_events",
      "repos_url": "https://api.github.com/users/aarzilli/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/aarzilli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aarzilli/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/aarzilli"
    }
  },
  {
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "In tip Delve, Travis runs builds/tests with `GOFLAGS=-mod=vendor`.\r\n\r\nBut \"make test\" does not. When a dependency is added or changed in `go.mod`, \"make test\" will pass but then Travis will break.\r\n\r\nWould it make sense for \"make test\" to run with `GOFLAGS=-mod=vendor` as well?\r\n\r\nAlternatively, is the introduction of `GOPROXY` affecting the decision to keep using a `vendor` directory in any way?",
    "closed_at": null,
    "comments": 1,
    "comments_url": "https://api.github.com/repos/go-delve/delve/issues/1862/comments",
    "created_at": "2020-02-12T18:24:16Z",
    "events_url": "https://api.github.com/repos/go-delve/delve/issues/1862/events",
    "html_url": "https://github.com/go-delve/delve/issues/1862",
    "id": 564183116,
    "labels": [
      {
        "color": "42d65f",
        "default": false,
        "description": "",
        "id": 1855648233,
        "name": "area/testing",
        "node_id": "MDU6TGFiZWwxODU1NjQ4MjMz",
        "url": "https://api.github.com/repos/go-delve/delve/labels/area/testing"
      },
      {
        "color": "0052cc",
        "default": false,
        "description": null,
        "id": 315745676,
        "name": "kind/discussion",
        "node_id": "MDU6TGFiZWwzMTU3NDU2NzY=",
        "url": "https://api.github.com/repos/go-delve/delve/labels/kind/discussion"
      }
    ],
    "labels_url": "https://api.github.com/repos/go-delve/delve/issues/1862/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU1NjQxODMxMTY=",
    "number": 1862,
    "repository_url": "https://api.github.com/repos/go-delve/delve",
    "state": "open",
    "title": "testing: should \"make test\" use the same flags as CI?",
    "updated_at": "2020-02-18T16:42:34Z",
    "url": "https://api.github.com/repos/go-delve/delve/issues/1862",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/1130906?v=4",
      "events_url": "https://api.github.com/users/eliben/events{/privacy}",
      "followers_url": "https://api.github.com/users/eliben/followers",
      "following_url": "https://api.github.com/users/eliben/following{/other_user}",
      "gists_url": "https://api.github.com/users/eliben/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/eliben",
      "id": 1130906,
      "login": "eliben",
      "node_id": "MDQ6VXNlcjExMzA5MDY=",
      "organizations_url": "https://api.github.com/users/eliben/orgs",
      "received_events_url": "https://api.github.com/users/eliben/received_events",
      "repos_url": "https://api.github.com/users/eliben/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/eliben/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eliben/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/eliben"
    }
  },
  {
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "This patch moves all breakpoint handling from the various backends\r\nup to Target, removing a bunch of duplication.\r\n\r\nWhen doing this I ran into an issue with Windows. For some reason I\r\ndon't fully understand, unlike the other backends, if you blindly\r\niterate over each thread and call SetCurrentBreakpoint it breaks Windows\r\nin unexpected ways which manifests itself in the `StepConcurrent` tests.\r\nThis is resolved by returning not only the initial thread that we first\r\nreceived the trap from, but all other threads that may have hit a\r\nbreakpoint as well. And then we only call SetCurrentBreakpoints on those\r\nthreads.\r\n\r\n",
    "closed_at": null,
    "comments": 3,
    "comments_url": "https://api.github.com/repos/go-delve/delve/issues/1854/comments",
    "created_at": "2020-01-30T09:31:52Z",
    "events_url": "https://api.github.com/repos/go-delve/delve/issues/1854/events",
    "html_url": "https://github.com/go-delve/delve/pull/1854",
    "id": 557368531,
    "labels": [],
    "labels_url": "https://api.github.com/repos/go-delve/delve/issues/1854/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzY4OTY5Mzg5",
    "number": 1854,
    "pull_request": {
      "diff_url": "https://github.com/go-delve/delve/pull/1854.diff",
      "html_url": "https://github.com/go-delve/delve/pull/1854",
      "patch_url": "https://github.com/go-delve/delve/pull/1854.patch",
      "url": "https://api.github.com/repos/go-delve/delve/pulls/1854"
    },
    "repository_url": "https://api.github.com/repos/go-delve/delve",
    "state": "open",
    "title": "pkg/proc: Move breakpoint logic up to Target",
    "updated_at": "2020-02-28T22:28:10Z",
    "url": "https://api.github.com/repos/go-delve/delve/issues/1854",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/1314079?v=4",
      "events_url": "https://api.github.com/users/derekparker/events{/privacy}",
      "followers_url": "https://api.github.com/users/derekparker/followers",
      "following_url": "https://api.github.com/users/derekparker/following{/other_user}",
      "gists_url": "https://api.github.com/users/derekparker/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/derekparker",
      "id": 1314079,
      "login": "derekparker",
      "node_id": "MDQ6VXNlcjEzMTQwNzk=",
      "organizations_url": "https://api.github.com/users/derekparker/orgs",
      "received_events_url": "https://api.github.com/users/derekparker/received_events",
      "repos_url": "https://api.github.com/users/derekparker/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/derekparker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/derekparker/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/derekparker"
    }
  },
  {
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "I checked and find delve Do Not Close Address Space Layout Randomization(ALSR) when debugging. It made us hard to locate the problems when randomization of  debuggee's virtual address space is on. So, i think it needs to be enhanced(like GDB already seted ASLR closed by default).",
    "closed_at": null,
    "comments": 2,
    "comments_url": "https://api.github.com/repos/go-delve/delve/issues/1847/comments",
    "created_at": "2020-01-25T13:43:00Z",
    "events_url": "https://api.github.com/repos/go-delve/delve/issues/1847/events",
    "html_url": "https://github.com/go-delve/delve/issues/1847",
    "id": 555087002,
    "labels": [],
    "labels_url": "https://api.github.com/repos/go-delve/delve/issues/1847/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU1NTUwODcwMDI=",
    "number": 1847,
    "repository_url": "https://api.github.com/repos/go-delve/delve",
    "state": "open",
    "title": "close \"ALSR\" to make debug convenient",
    "updated_at": "2020-01-30T04:27:25Z",
    "url": "https://api.github.com/repos/go-delve/delve/issues/1847",
    "user": {
      "avatar_url": "https://avatars1.githubusercontent.com/u/41297446?v=4",
      "events_url": "https://api.github.com/users/hengwu0/events{/privacy}",
      "followers_url": "https://api.github.com/users/hengwu0/followers",
      "following_url": "https://api.github.com/users/hengwu0/following{/other_user}",
      "gists_url": "https://api.github.com/users/hengwu0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/hengwu0",
      "id": 41297446,
      "login": "hengwu0",
      "node_id": "MDQ6VXNlcjQxMjk3NDQ2",
      "organizations_url": "https://api.github.com/users/hengwu0/orgs",
      "received_events_url": "https://api.github.com/users/hengwu0/received_events",
      "repos_url": "https://api.github.com/users/hengwu0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/hengwu0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hengwu0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/hengwu0"
    }
  },
  {
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "```\nproc: optimize parseG\n\nruntime.g is a large and growing struct, we only need a few fields.\nInstead of using loadValue to load the full contents of g cache its\nmemory and then only load the fields we care about.\n\nBenchmark before:\n\nBenchmarkConditionalBreakpoints-4              1        10013510647 ns/op\n\nBenchmark after:\n\nBenchmarkConditionalBreakpoints-4   \t       1\t9330025748 ns/op\n\nConditional breakpoint evaluation: 1.0ms -> 0.93ms\n\nUpdates #1549\n\nproc: optimize RegistersToDwarfRegisters\n\nBenchmark before:\n\nBenchmarkConditionalBreakpoints-4              1        11570508729 ns/op\n\nBenchmark after:\n\nBenchmarkConditionalBreakpoints-4   \t       1\t10013510647 ns/op\n\nConditional breakpoint evaluation 1.2ms -> 1.0ms\n\nUpdates #1549\n\nproc: cache result of GetG\n\nBenchmark before:\n\nBenchmarkConditionalBreakpoints-4              1        15929810602 ns/op\n\nBenchmark after:\n\nBenchmarkConditionalBreakpoints-4   \t       1\t11570508729 ns/op\n\nConditional breakpoint evaluation 1.6ms -> 1.2ms\n\nUpdates #1549\n\nproc,proc/*: move SelectedGoroutine to proc.Target\n\nmoves SelectedGoroutine, SwitchThread and SwitchGoroutine to\nproc.Target, merges PostInitializationSetup with NewTarget.\n\nproc/native: optimize native.status through buffering\n\nBenchmark before:\n\nBenchmarkConditionalBreakpoints-4              1        17294564246 ns/op\n\nBenchmark after:\n\nBenchmarkConditionalBreakpoints-4   \t       1\t15929810602 ns/op\n\nConditional breakpoint evaluation 1.7ms -> 1.6ms\n\nUpdates #1549\n\nproc: do not load g0 until it's needed when stacktracing\n\nThe stacktrace code occasionally needs the value of g.m.g0.sched.sp to\nswitch stacks. Since this is only needed rarely and calling parseG is\nrelatively expensive we should delay doing it until we know it will be\nneeded.\n\nBenchmark before:\n\nBenchmarkConditionalBreakpoints-4              1        18397062447 ns/op\n\nBenchmark after:\n\nBenchmarkConditionalBreakpoints-4   \t       1\t17294564246 ns/op\n\ni.e. this commit improves the time needed to evaluate a conditional\nbreakpoint from 1.8ms to 1.7ms.\n\nUpdates #1549\n\nproc: only format registers value when it's necessary\n\nReduces the minimum amount of time needed to stop and resume a process\nthat hits a breakpoint.\nA significant amount of time is spent generating the strings for the\nproc.Registers object of each thread, since this field is rarely used\n(only when the Registers API is called) it should be generated on\ndemand.\n\nBenchmark before:\n\nBenchmarkConditionalBreakpoints-4   \t       1\t22218288218 ns/op\n\nBenchmark after:\n\nBenchmarkConditionalBreakpoints-4   \t       1\t18397062447 ns/op\n\ni.e. this commit reduces the time spent stopping and resuming a process\nfrom 2.2ms to 1.8ms.\n\nUpdates #1549\n\ndwarf/reader: precalcStack does not need to read past the first entry\n\nIt was reading all the way to the end of the debug_info section,\nslowing down stacktraces substantially.\n\nBenchmark before:\n\nBenchmarkConditionalBreakpoints-4   \t       1\t80344642562 ns/op\n\nBenchmark after:\n\nBenchmarkConditionalBreakpoints-4   \t       1\t22218288218 ns/op\n\ni.e. a reduction of the cost of a breakpoint hit from 8ms to 2.2ms\n\nUpdates #1549\n\ntests: add benchmark for conditional breakpoints\n\nproc: remove CX method from proc.Registers\n\nIt is not used anymore besides internally by the proc/gdbserial\nbackend.\n\n```\n",
    "closed_at": null,
    "comments": 0,
    "comments_url": "https://api.github.com/repos/go-delve/delve/issues/1846/comments",
    "created_at": "2020-01-25T09:11:07Z",
    "events_url": "https://api.github.com/repos/go-delve/delve/issues/1846/events",
    "html_url": "https://github.com/go-delve/delve/pull/1846",
    "id": 555062522,
    "labels": [],
    "labels_url": "https://api.github.com/repos/go-delve/delve/issues/1846/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzY3MTAxNzU3",
    "number": 1846,
    "pull_request": {
      "diff_url": "https://github.com/go-delve/delve/pull/1846.diff",
      "html_url": "https://github.com/go-delve/delve/pull/1846",
      "patch_url": "https://github.com/go-delve/delve/pull/1846.patch",
      "url": "https://api.github.com/repos/go-delve/delve/pulls/1846"
    },
    "repository_url": "https://api.github.com/repos/go-delve/delve",
    "state": "open",
    "title": "Reduce latency of conditional breakpoints/stop-resume cycles {WIP]",
    "updated_at": "2020-01-27T12:36:12Z",
    "url": "https://api.github.com/repos/go-delve/delve/issues/1846",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/303620?v=4",
      "events_url": "https://api.github.com/users/aarzilli/events{/privacy}",
      "followers_url": "https://api.github.com/users/aarzilli/followers",
      "following_url": "https://api.github.com/users/aarzilli/following{/other_user}",
      "gists_url": "https://api.github.com/users/aarzilli/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/aarzilli",
      "id": 303620,
      "login": "aarzilli",
      "node_id": "MDQ6VXNlcjMwMzYyMA==",
      "organizations_url": "https://api.github.com/users/aarzilli/orgs",
      "received_events_url": "https://api.github.com/users/aarzilli/received_events",
      "repos_url": "https://api.github.com/users/aarzilli/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/aarzilli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aarzilli/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/aarzilli"
    }
  },
  {
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "Please answer the following before submitting your issue:\r\n\r\nNote: Please include any substantial examples (debug session output,\r\nstacktraces, etc) as linked gists.\r\n\r\n1. What version of Delve are you using (`dlv version`)?\r\n\r\nLatest master.\r\n```\r\n\u03bb dlv version\r\nDelve Debugger\r\nVersion: 1.3.2\r\nBuild: $Id: 569ccbd514fc47c8b4c521b142556867ec5e6917 $\r\n```\r\n\r\n2. What version of Go are you using? (`go version`)?\r\n\r\n`go version go1.13.6 windows/amd64`\r\n\r\n3. What operating system and processor architecture are you using?\r\n\r\nwindows/amd64\r\n\r\n4. What did you do?\r\n\r\nReproduction sample: [repro.zip](https://github.com/go-delve/delve/files/4082975/repro.zip)\r\n\r\nRun the sample. Crash occurs. We switch to the frame causing the crash (3). Print registers.\r\n```\r\n\u03bb dlv test                                                                                                               \r\nType 'help' for list of commands.                                                                                        \r\n(dlv) continue                                                                                                           \r\nunexpected fault address 0xc000270398                                                                                    \r\nfatal error: fault                                                                                                       \r\n> [runtime-fatal-throw] runtime.fatalthrow() c:/go/src/runtime/panic.go:820 (hits goroutine(6):1 total:1) (PC: 0x4356f0) \r\nWarning: debugging optimized function                                                                                    \r\n   815: // fatalthrow implements an unrecoverable runtime throw. It freezes the                                          \r\n   816: // system, prints stack traces starting from its caller, and terminates the                                      \r\n   817: // process.                                                                                                      \r\n   818: //                                                                                                               \r\n   819: //go:nosplit                                                                                                     \r\n=> 820: func fatalthrow() {                                                                                              \r\n   821:         pc := getcallerpc()                                                                                      \r\n   822:         sp := getcallersp()                                                                                      \r\n   823:         gp := getg()                                                                                             \r\n   824:         // Switch to the system stack to avoid any stack growth, which                                           \r\n   825:         // may make things worse if the runtime is in a bad state.                                               \r\n(dlv) stack                                                                                                              \r\n0  0x00000000004356f0 in runtime.fatalthrow                                                                              \r\n   at c:/go/src/runtime/panic.go:820                                                                                     \r\n1  0x0000000000435579 in runtime.throw                                                                                   \r\n   at c:/go/src/runtime/panic.go:774                                                                                     \r\n2  0x0000000000448463 in runtime.sigpanic                                                                                \r\n   at c:/go/src/runtime/signal_windows.go:236                                                                            \r\n3  0x0000000000560598 in _/e_/temp/weird.repro                                                                           \r\n   at e:/temp/weird/repro.s:6                                                                                            \r\n4  0x0000000000560579 in _/e_/temp/weird.TestRepro                                                                       \r\n   at e:/temp/weird/test_test.go:6                                                                                       \r\n5  0x000000000050a353 in testing.tRunner                                                                                 \r\n   at c:/go/src/testing/testing.go:909                                                                                   \r\n6  0x0000000000463c71 in runtime.goexit                                                                                  \r\n   at c:/go/src/runtime/asm_amd64.s:1357                                                                                 \r\n(dlv) frame 3                                                                                                            \r\n> [runtime-fatal-throw] runtime.fatalthrow() c:/go/src/runtime/panic.go:820 (hits goroutine(6):1 total:1) (PC: 0x4356f0) \r\nWarning: debugging optimized function                                                                                    \r\nFrame 3: e:/temp/weird/repro.s:6 (PC: 560598)                                                                            \r\n     1: #include \"textflag.h\"                                                                                            \r\n     2:                                                                                                                  \r\n     3: // func repro(src []byte)                                                                                        \r\n     4: TEXT \u00b7repro(SB), NOSPLIT, $0-24                                                                                  \r\n     5:         XORQ AX, AX                                                                                              \r\n=>   6:         LEAQ src_base+0(FP), CX                                                                                  \r\n     7:         MOVQ AX, 2000000(CX)                                                                                     \r\n     8:         RET                                                                                                      \r\n(dlv) disassemble\r\nTEXT _/e_/temp/weird.repro(SB) e:/temp/weird/repro.s\r\n        repro.s:5       0x560590        4831c0          xor rax, rax\r\n        repro.s:6       0x560593        488d4c2408      lea rcx, ptr [rsp+0x8]\r\n        repro.s:7       0x560598        48898180841e00  mov qword ptr [rcx+0x1e8480], rax\r\n        repro.s:8       0x56059f        c3              ret\r\n(dlv) regs                                                                                                               \r\n   Rip = 0x00000000004356f0                                                                                              \r\n   Rsp = 0x000000c000087ea8                                                                                              \r\n   Rax = 0x00000000006bc5e0                                                                                              \r\n   Rbx = 0x00000000006bc5e0                                                                                              \r\n   Rcx = 0x00000000006bc638                                                                                              \r\n   Rdx = 0x00000000006db090                                                                                              \r\n   Rdi = 0x0000000000258000                                                                                              \r\n   Rsi = 0x000000000099fd01                                                                                              \r\n   Rbp = 0x000000c000087ed0                                                                                              \r\n    R8 = 0x000000000099fbc8                                                                                              \r\n    R9 = 0x000000000099fd48                                                                                              \r\n   R10 = 0x0000000000000000                                                                                              \r\n   R11 = 0x0000000000000246                                                                                              \r\n   R12 = 0x0000000002030000                                                                                              \r\n   R13 = 0x0000000000000000                                                                                              \r\n   R14 = 0x00000000000000d0                                                                                              \r\n   R15 = 0x0000000000000000                                                                                              \r\nEflags = 0x0000000000000244     [PF ZF IF IOPL=0]                                                                        \r\n    Cs = 0x0000000000000033                                                                                              \r\n    Fs = 0x0000000000000053                                                                                              \r\n    Gs = 0x000000000000002b                                                                                              \r\n   TLS = 0x0000000000258000                                                                                              \r\n(dlv)\r\n```                                                                                                                         \r\n\r\n5. What did you expect to see?\r\n\r\nRAX to be 0. Note the `XORQ AX, AX` before the crash was invoked.\r\n\r\nAlso the instruction pointed to is wrong. There is AFAIK no way for `LEAQ` to fail.\r\n \r\n6. What did you see instead?\r\n\r\nRAX shows the registers at frame 0 as far as I can tell.\r\n\r\nThanks for a great tool! ",
    "closed_at": null,
    "comments": 7,
    "comments_url": "https://api.github.com/repos/go-delve/delve/issues/1838/comments",
    "created_at": "2020-01-19T17:36:14Z",
    "events_url": "https://api.github.com/repos/go-delve/delve/issues/1838/events",
    "html_url": "https://github.com/go-delve/delve/issues/1838",
    "id": 551955708,
    "labels": [
      {
        "color": "207de5",
        "default": false,
        "description": null,
        "id": 315745546,
        "name": "area/proc",
        "node_id": "MDU6TGFiZWwzMTU3NDU1NDY=",
        "url": "https://api.github.com/repos/go-delve/delve/labels/area/proc"
      },
      {
        "color": "fef2c0",
        "default": false,
        "description": null,
        "id": 597329885,
        "name": "area/proc/native",
        "node_id": "MDU6TGFiZWw1OTczMjk4ODU=",
        "url": "https://api.github.com/repos/go-delve/delve/labels/area/proc/native"
      },
      {
        "color": "0052cc",
        "default": false,
        "description": null,
        "id": 315745668,
        "name": "kind/enhancement",
        "node_id": "MDU6TGFiZWwzMTU3NDU2Njg=",
        "url": "https://api.github.com/repos/go-delve/delve/labels/kind/enhancement"
      }
    ],
    "labels_url": "https://api.github.com/repos/go-delve/delve/issues/1838/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU1NTE5NTU3MDg=",
    "number": 1838,
    "repository_url": "https://api.github.com/repos/go-delve/delve",
    "state": "open",
    "title": "'regs' does not show selected frame registers.",
    "updated_at": "2020-01-23T05:12:56Z",
    "url": "https://api.github.com/repos/go-delve/delve/issues/1838",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/5663952?v=4",
      "events_url": "https://api.github.com/users/klauspost/events{/privacy}",
      "followers_url": "https://api.github.com/users/klauspost/followers",
      "following_url": "https://api.github.com/users/klauspost/following{/other_user}",
      "gists_url": "https://api.github.com/users/klauspost/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/klauspost",
      "id": 5663952,
      "login": "klauspost",
      "node_id": "MDQ6VXNlcjU2NjM5NTI=",
      "organizations_url": "https://api.github.com/users/klauspost/orgs",
      "received_events_url": "https://api.github.com/users/klauspost/received_events",
      "repos_url": "https://api.github.com/users/klauspost/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/klauspost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/klauspost/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/klauspost"
    }
  },
  {
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "I think `dlv ` could support more languates, especially the `msg` for `help` (include the children of cmd) or specific error.  \r\nEn, but it looks like `cobra`  does not support it ([the issues for cobra](https://github.com/spf13/cobra/issues/719))",
    "closed_at": null,
    "comments": 0,
    "comments_url": "https://api.github.com/repos/go-delve/delve/issues/1815/comments",
    "created_at": "2020-01-07T08:41:33Z",
    "events_url": "https://api.github.com/repos/go-delve/delve/issues/1815/events",
    "html_url": "https://github.com/go-delve/delve/issues/1815",
    "id": 546153224,
    "labels": [
      {
        "color": "0052cc",
        "default": false,
        "description": null,
        "id": 315745668,
        "name": "kind/enhancement",
        "node_id": "MDU6TGFiZWwzMTU3NDU2Njg=",
        "url": "https://api.github.com/repos/go-delve/delve/labels/kind/enhancement"
      }
    ],
    "labels_url": "https://api.github.com/repos/go-delve/delve/issues/1815/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU1NDYxNTMyMjQ=",
    "number": 1815,
    "repository_url": "https://api.github.com/repos/go-delve/delve",
    "state": "open",
    "title": "Feature: Languages (i18n)",
    "updated_at": "2020-01-09T09:20:05Z",
    "url": "https://api.github.com/repos/go-delve/delve/issues/1815",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/7046329?v=4",
      "events_url": "https://api.github.com/users/chainhelen/events{/privacy}",
      "followers_url": "https://api.github.com/users/chainhelen/followers",
      "following_url": "https://api.github.com/users/chainhelen/following{/other_user}",
      "gists_url": "https://api.github.com/users/chainhelen/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/chainhelen",
      "id": 7046329,
      "login": "chainhelen",
      "node_id": "MDQ6VXNlcjcwNDYzMjk=",
      "organizations_url": "https://api.github.com/users/chainhelen/orgs",
      "received_events_url": "https://api.github.com/users/chainhelen/received_events",
      "repos_url": "https://api.github.com/users/chainhelen/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/chainhelen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chainhelen/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/chainhelen"
    }
  },
  {
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "Travis-CI has updated its macOS builders to 10.13.6 (from ???) and now call injection tests are failing with the error:\r\n\r\n```\r\nCall - could not restore registers: protocol error E32 during register write for packet $P7b=03000000;thread...\r\n```\r\n\r\nThe cause of this error is possibly inside debugserver but it could also be that we are doing something wrong. Somebody with access to a system that can replicate this issue should investigate this problem.",
    "closed_at": null,
    "comments": 0,
    "comments_url": "https://api.github.com/repos/go-delve/delve/issues/1802/comments",
    "created_at": "2019-12-27T14:55:26Z",
    "events_url": "https://api.github.com/repos/go-delve/delve/issues/1802/events",
    "html_url": "https://github.com/go-delve/delve/issues/1802",
    "id": 542900126,
    "labels": [
      {
        "color": "d4c5f9",
        "default": false,
        "description": null,
        "id": 597329835,
        "name": "area/proc/gdbserial",
        "node_id": "MDU6TGFiZWw1OTczMjk4MzU=",
        "url": "https://api.github.com/repos/go-delve/delve/labels/area/proc/gdbserial"
      },
      {
        "color": "159818",
        "default": true,
        "description": null,
        "id": 101022903,
        "name": "help wanted",
        "node_id": "MDU6TGFiZWwxMDEwMjI5MDM=",
        "url": "https://api.github.com/repos/go-delve/delve/labels/help%20wanted"
      },
      {
        "color": "fc2929",
        "default": false,
        "description": null,
        "id": 101022900,
        "name": "kind/bug",
        "node_id": "MDU6TGFiZWwxMDEwMjI5MDA=",
        "url": "https://api.github.com/repos/go-delve/delve/labels/kind/bug"
      },
      {
        "color": "bfdadc",
        "default": false,
        "description": null,
        "id": 315745385,
        "name": "os/OSX",
        "node_id": "MDU6TGFiZWwzMTU3NDUzODU=",
        "url": "https://api.github.com/repos/go-delve/delve/labels/os/OSX"
      }
    ],
    "labels_url": "https://api.github.com/repos/go-delve/delve/issues/1802/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU1NDI5MDAxMjY=",
    "number": 1802,
    "repository_url": "https://api.github.com/repos/go-delve/delve",
    "state": "open",
    "title": "Function call injection failures on Travis-CI",
    "updated_at": "2019-12-27T14:56:00Z",
    "url": "https://api.github.com/repos/go-delve/delve/issues/1802",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/303620?v=4",
      "events_url": "https://api.github.com/users/aarzilli/events{/privacy}",
      "followers_url": "https://api.github.com/users/aarzilli/followers",
      "following_url": "https://api.github.com/users/aarzilli/following{/other_user}",
      "gists_url": "https://api.github.com/users/aarzilli/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/aarzilli",
      "id": 303620,
      "login": "aarzilli",
      "node_id": "MDQ6VXNlcjMwMzYyMA==",
      "organizations_url": "https://api.github.com/users/aarzilli/orgs",
      "received_events_url": "https://api.github.com/users/aarzilli/received_events",
      "repos_url": "https://api.github.com/users/aarzilli/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/aarzilli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aarzilli/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/aarzilli"
    }
  },
  {
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "Delve Debugger\r\nVersion: 1.3.2\r\nBuild: $Id: 569ccbd514fc47c8b4c521b142556867ec5e6917 $\r\n",
    "closed_at": null,
    "comments": 2,
    "comments_url": "https://api.github.com/repos/go-delve/delve/issues/1801/comments",
    "created_at": "2019-12-27T07:33:37Z",
    "events_url": "https://api.github.com/repos/go-delve/delve/issues/1801/events",
    "html_url": "https://github.com/go-delve/delve/issues/1801",
    "id": 542780833,
    "labels": [
      {
        "color": "0052cc",
        "default": false,
        "description": null,
        "id": 358818143,
        "name": "kind/needs more info",
        "node_id": "MDU6TGFiZWwzNTg4MTgxNDM=",
        "url": "https://api.github.com/repos/go-delve/delve/labels/kind/needs%20more%20info"
      }
    ],
    "labels_url": "https://api.github.com/repos/go-delve/delve/issues/1801/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU1NDI3ODA4MzM=",
    "number": 1801,
    "repository_url": "https://api.github.com/repos/go-delve/delve",
    "state": "open",
    "title": "When to support read var from stdin in debug mode",
    "updated_at": "2020-01-05T14:30:30Z",
    "url": "https://api.github.com/repos/go-delve/delve/issues/1801",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/50982164?v=4",
      "events_url": "https://api.github.com/users/xieyuanhuata/events{/privacy}",
      "followers_url": "https://api.github.com/users/xieyuanhuata/followers",
      "following_url": "https://api.github.com/users/xieyuanhuata/following{/other_user}",
      "gists_url": "https://api.github.com/users/xieyuanhuata/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/xieyuanhuata",
      "id": 50982164,
      "login": "xieyuanhuata",
      "node_id": "MDQ6VXNlcjUwOTgyMTY0",
      "organizations_url": "https://api.github.com/users/xieyuanhuata/orgs",
      "received_events_url": "https://api.github.com/users/xieyuanhuata/received_events",
      "repos_url": "https://api.github.com/users/xieyuanhuata/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/xieyuanhuata/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/xieyuanhuata/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/xieyuanhuata"
    }
  },
  {
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "It's really hard to debug dlv with dlv, if we can't print the values with hex format.",
    "closed_at": null,
    "comments": 0,
    "comments_url": "https://api.github.com/repos/go-delve/delve/issues/1800/comments",
    "created_at": "2019-12-19T09:11:07Z",
    "events_url": "https://api.github.com/repos/go-delve/delve/issues/1800/events",
    "html_url": "https://github.com/go-delve/delve/issues/1800",
    "id": 540176919,
    "labels": [
      {
        "color": "207de5",
        "default": false,
        "description": null,
        "id": 315748069,
        "name": "area/cli",
        "node_id": "MDU6TGFiZWwzMTU3NDgwNjk=",
        "url": "https://api.github.com/repos/go-delve/delve/labels/area/cli"
      },
      {
        "color": "0052cc",
        "default": false,
        "description": null,
        "id": 315745668,
        "name": "kind/enhancement",
        "node_id": "MDU6TGFiZWwzMTU3NDU2Njg=",
        "url": "https://api.github.com/repos/go-delve/delve/labels/kind/enhancement"
      }
    ],
    "labels_url": "https://api.github.com/repos/go-delve/delve/issues/1800/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU1NDAxNzY5MTk=",
    "number": 1800,
    "repository_url": "https://api.github.com/repos/go-delve/delve",
    "state": "open",
    "title": "print can't output digits with HEX format.",
    "updated_at": "2019-12-19T10:58:03Z",
    "url": "https://api.github.com/repos/go-delve/delve/issues/1800",
    "user": {
      "avatar_url": "https://avatars1.githubusercontent.com/u/41297446?v=4",
      "events_url": "https://api.github.com/users/hengwu0/events{/privacy}",
      "followers_url": "https://api.github.com/users/hengwu0/followers",
      "following_url": "https://api.github.com/users/hengwu0/following{/other_user}",
      "gists_url": "https://api.github.com/users/hengwu0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/hengwu0",
      "id": 41297446,
      "login": "hengwu0",
      "node_id": "MDQ6VXNlcjQxMjk3NDQ2",
      "organizations_url": "https://api.github.com/users/hengwu0/orgs",
      "received_events_url": "https://api.github.com/users/hengwu0/received_events",
      "repos_url": "https://api.github.com/users/hengwu0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/hengwu0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hengwu0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/hengwu0"
    }
  },
  {
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "Please answer the following before submitting your issue:\r\n\r\nNote: Please include any substantial examples (debug session output,\r\nstacktraces, etc) as linked gists.\r\n\r\n1. What version of Delve are you using (`dlv version`)?\r\nDelve Debugger\r\nVersion: 1.3.2\r\n\r\n2. What version of Go are you using? (`go version`)?\r\ngo version go1.13.5 linux/amd64\r\n\r\n3. What operating system and processor architecture are you using?\r\nopensuse 15.1\r\n4. What did you do?\r\ndebug with vs code\r\n\r\n5. What did you expect to see?\r\nnormal debug\r\n\r\n6. What did you see instead?\r\n<pre>\r\nRunning: /home/.go/bin/dlv debug --headless=true --listen=127.0.0.1:47250 --api-version=2 --log=true --log-output=rpc --build-flags=-tags=exe\r\nAPI server listening at: 127.0.0.1:47250\r\nInitializeEvent\r\ncould not launch process: fork/exec /home/client/__debug_bin: exec format error\r\nProcess exiting with code: 1\r\nSending TerminatedEvent as delve is closed\r\nDisconnectRequest\r\nHaltRequest\r\nConfigurationDoneRequest\r\n</pre>\r\n\r\nBut, the command line can be run in terminal with out error",
    "closed_at": null,
    "comments": 3,
    "comments_url": "https://api.github.com/repos/go-delve/delve/issues/1799/comments",
    "created_at": "2019-12-18T16:00:33Z",
    "events_url": "https://api.github.com/repos/go-delve/delve/issues/1799/events",
    "html_url": "https://github.com/go-delve/delve/issues/1799",
    "id": 539771231,
    "labels": [
      {
        "color": "0052cc",
        "default": false,
        "description": null,
        "id": 358818143,
        "name": "kind/needs more info",
        "node_id": "MDU6TGFiZWwzNTg4MTgxNDM=",
        "url": "https://api.github.com/repos/go-delve/delve/labels/kind/needs%20more%20info"
      }
    ],
    "labels_url": "https://api.github.com/repos/go-delve/delve/issues/1799/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU1Mzk3NzEyMzE=",
    "number": 1799,
    "repository_url": "https://api.github.com/repos/go-delve/delve",
    "state": "open",
    "title": "opensuse 15.1 vs code debug failed with fork/exec",
    "updated_at": "2019-12-27T15:11:01Z",
    "url": "https://api.github.com/repos/go-delve/delve/issues/1799",
    "user": {
      "avatar_url": "https://avatars1.githubusercontent.com/u/367961?v=4",
      "events_url": "https://api.github.com/users/liuheqi/events{/privacy}",
      "followers_url": "https://api.github.com/users/liuheqi/followers",
      "following_url": "https://api.github.com/users/liuheqi/following{/other_user}",
      "gists_url": "https://api.github.com/users/liuheqi/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/liuheqi",
      "id": 367961,
      "login": "liuheqi",
      "node_id": "MDQ6VXNlcjM2Nzk2MQ==",
      "organizations_url": "https://api.github.com/users/liuheqi/orgs",
      "received_events_url": "https://api.github.com/users/liuheqi/received_events",
      "repos_url": "https://api.github.com/users/liuheqi/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/liuheqi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/liuheqi/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/liuheqi"
    }
  },
  {
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "Python's PDB and Ruby's IRB both have a convenient feature for starting the debugger programatically from inside the code. The advantage is that it's equal or less effort than printf debugging.\r\n\r\nEx:\r\n\r\n``` go\r\npackage main\r\n\r\nimport \"github.com/go-delve/delve\"\r\n\r\nfunc main() {\r\n\tdelve.Debug()\r\n}\r\n```\r\n\r\nI don't know if this is feasible, but I figured it would be worth asking.",
    "closed_at": null,
    "comments": 7,
    "comments_url": "https://api.github.com/repos/go-delve/delve/issues/1794/comments",
    "created_at": "2019-12-10T18:59:27Z",
    "events_url": "https://api.github.com/repos/go-delve/delve/issues/1794/events",
    "html_url": "https://github.com/go-delve/delve/issues/1794",
    "id": 535922378,
    "labels": [
      {
        "color": "0052cc",
        "default": false,
        "description": null,
        "id": 315745668,
        "name": "kind/enhancement",
        "node_id": "MDU6TGFiZWwzMTU3NDU2Njg=",
        "url": "https://api.github.com/repos/go-delve/delve/labels/kind/enhancement"
      }
    ],
    "labels_url": "https://api.github.com/repos/go-delve/delve/issues/1794/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU1MzU5MjIzNzg=",
    "number": 1794,
    "repository_url": "https://api.github.com/repos/go-delve/delve",
    "state": "open",
    "title": "Feature request: invoke debugger from inside program",
    "updated_at": "2019-12-13T15:59:03Z",
    "url": "https://api.github.com/repos/go-delve/delve/issues/1794",
    "user": {
      "avatar_url": "https://avatars1.githubusercontent.com/u/943597?v=4",
      "events_url": "https://api.github.com/users/icholy/events{/privacy}",
      "followers_url": "https://api.github.com/users/icholy/followers",
      "following_url": "https://api.github.com/users/icholy/following{/other_user}",
      "gists_url": "https://api.github.com/users/icholy/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/icholy",
      "id": 943597,
      "login": "icholy",
      "node_id": "MDQ6VXNlcjk0MzU5Nw==",
      "organizations_url": "https://api.github.com/users/icholy/orgs",
      "received_events_url": "https://api.github.com/users/icholy/received_events",
      "repos_url": "https://api.github.com/users/icholy/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/icholy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/icholy/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/icholy"
    }
  },
  {
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "```\nservice,terminal: implement reverse step, next, stepout\n\nproc: implement reverse step/next/stepout\n\nWhen the direction of execution is reversed (on a recording) Step, Next and\nStepOut will behave similarly to their forward version. However there are\nsome subtle interactions between their behavior, prologue skipping, deferred\ncalls and normal calls. Specifically:\n\n- when stepping backwards we need to set a breakpoint on the first\ninstruction after each CALL instruction, once this breakpoint is reached we\nneed to execute a single StepInstruction operation to reverse step into the\nCALL.\n- to insure that the prologue is skipped reverse next needs to check if it\nis on the first instruction after the prologue, and if it is behave like\nreverse stepout.\n- there is no reason to set breakpoints on deferred calls when reverse\nnexting or reverse stepping out, they will never be hit.\n- reverse step out should generally place its breakpoint on the CALL\ninstruction that created the current stack frame (which will be the CALL\ninstruction immediately preceding the instruction at the return address).\n- reverse step out needs to treat panic calls and deferreturn calls\nspecially.\n\nproc: move defer breakpoint code into a function\n\nMoves the code that sets a breakpoint on the first deferred function,\nused by both next and StepOut, to its function.\n\n```\n",
    "closed_at": null,
    "comments": 4,
    "comments_url": "https://api.github.com/repos/go-delve/delve/issues/1785/comments",
    "created_at": "2019-12-04T13:55:48Z",
    "events_url": "https://api.github.com/repos/go-delve/delve/issues/1785/events",
    "html_url": "https://github.com/go-delve/delve/pull/1785",
    "id": 532700603,
    "labels": [],
    "labels_url": "https://api.github.com/repos/go-delve/delve/issues/1785/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzQ4OTAxOTE4",
    "number": 1785,
    "pull_request": {
      "diff_url": "https://github.com/go-delve/delve/pull/1785.diff",
      "html_url": "https://github.com/go-delve/delve/pull/1785",
      "patch_url": "https://github.com/go-delve/delve/pull/1785.patch",
      "url": "https://api.github.com/repos/go-delve/delve/pulls/1785"
    },
    "repository_url": "https://api.github.com/repos/go-delve/delve",
    "state": "open",
    "title": "Implement reverse step, next and stepout",
    "updated_at": "2020-02-20T11:18:25Z",
    "url": "https://api.github.com/repos/go-delve/delve/issues/1785",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/303620?v=4",
      "events_url": "https://api.github.com/users/aarzilli/events{/privacy}",
      "followers_url": "https://api.github.com/users/aarzilli/followers",
      "following_url": "https://api.github.com/users/aarzilli/following{/other_user}",
      "gists_url": "https://api.github.com/users/aarzilli/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/aarzilli",
      "id": 303620,
      "login": "aarzilli",
      "node_id": "MDQ6VXNlcjMwMzYyMA==",
      "organizations_url": "https://api.github.com/users/aarzilli/orgs",
      "received_events_url": "https://api.github.com/users/aarzilli/received_events",
      "repos_url": "https://api.github.com/users/aarzilli/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/aarzilli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aarzilli/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/aarzilli"
    }
  },
  {
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "1\u3001There is bug in orig-Detach function, it needs to be investigated to fix `TestExit` and `TestExitAfterContinue`.\r\n2\u3001`TestDisassembleGlobalVars` needs to be investigated. The disasm has been implemented and all other disasm tests passed, except this one. It seems can't find main.v in range of mainfn.Entry and mainfn.End on arm64.\r\n3\u3001To implemente stacktrace with separate amd64-arch code again.\r\n4\u3001To implemente Fp registers and Fp instructions\r\n\r\n#1733, #118",
    "closed_at": null,
    "comments": 3,
    "comments_url": "https://api.github.com/repos/go-delve/delve/issues/1770/comments",
    "created_at": "2019-11-26T02:01:53Z",
    "events_url": "https://api.github.com/repos/go-delve/delve/issues/1770/events",
    "html_url": "https://github.com/go-delve/delve/issues/1770",
    "id": 528440566,
    "labels": [
      {
        "color": "b885d1",
        "default": false,
        "description": "",
        "id": 1705051625,
        "name": "arch/arm64",
        "node_id": "MDU6TGFiZWwxNzA1MDUxNjI1",
        "url": "https://api.github.com/repos/go-delve/delve/labels/arch/arm64"
      }
    ],
    "labels_url": "https://api.github.com/repos/go-delve/delve/issues/1770/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU1Mjg0NDA1NjY=",
    "number": 1770,
    "repository_url": "https://api.github.com/repos/go-delve/delve",
    "state": "open",
    "title": "Next steps of the remaining work of debugging support on ARM64",
    "updated_at": "2019-11-29T12:40:33Z",
    "url": "https://api.github.com/repos/go-delve/delve/issues/1770",
    "user": {
      "avatar_url": "https://avatars1.githubusercontent.com/u/41297446?v=4",
      "events_url": "https://api.github.com/users/hengwu0/events{/privacy}",
      "followers_url": "https://api.github.com/users/hengwu0/followers",
      "following_url": "https://api.github.com/users/hengwu0/following{/other_user}",
      "gists_url": "https://api.github.com/users/hengwu0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/hengwu0",
      "id": 41297446,
      "login": "hengwu0",
      "node_id": "MDQ6VXNlcjQxMjk3NDQ2",
      "organizations_url": "https://api.github.com/users/hengwu0/orgs",
      "received_events_url": "https://api.github.com/users/hengwu0/received_events",
      "repos_url": "https://api.github.com/users/hengwu0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/hengwu0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hengwu0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/hengwu0"
    }
  },
  {
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "1. What version of Delve are you using (`dlv version`)?\r\nDelve Debugger\r\nVersion: 1.3.2\r\nBuild: $Id: 569ccbd514fc47c8b4c521b142556867ec5e6917 $\r\n\r\n2. What version of Go are you using? (`go version`)?\r\ngo version go1.13.4 windows/amd64\r\n\r\n3. What operating system and processor architecture are you using?\r\nwindows/amd64\r\n\r\nWith the following code, try to inspect the value of the BrokenInner slice in in VSCode. It will fail & print an error message on the debug console. As far as I can tell this only happens when inspecting a slice of an anonymous struct with a tagged field. Doesn't happen if you move the slice outside the struct.\r\n\r\n```\r\ntype Broken struct {\r\n\tBrokenInner []struct {\r\n\t\tMyField string `json:\"field\"`\r\n\t}\r\n}\r\n\r\nfunc main() {\r\n\tvar b = Broken{\r\n\t\tBrokenInner: []struct {\r\n\t\t\tMyField string `json:\"field\"`\r\n\t\t}{{\"test\"}},\r\n\t}\r\n\tfmt.Printf(\"%v\\n\", b)\r\n}\r\n```\r\n\r\nWhen I inspect the value in the VSCode debugger, I get this in console:\r\n```\r\nFailed to eval expression:  {\r\n \"Expr\": \"*(*\\\"struct { MyField string \\\"json:\\\\\\\"field\\\\\\\"\\\" }\\\")(824634008048)\",\r\n \"Scope\": {\r\n  \"goroutineID\": -1,\r\n  \"frame\": 0\r\n },\r\n \"Cfg\": {\r\n  \"followPointers\": true,\r\n  \"maxVariableRecurse\": 1,\r\n  \"maxStringLen\": 64,\r\n  \"maxArrayValues\": 64,\r\n  \"maxStructFields\": -1\r\n }\r\n} \r\n\r\nEval error: 1:30: expected ')', found json (and 1 more errors)\r\nFailed to evaluate expression - 1:30: expected ')', found json (and 1 more errors)\r\n```",
    "closed_at": null,
    "comments": 2,
    "comments_url": "https://api.github.com/repos/go-delve/delve/issues/1768/comments",
    "created_at": "2019-11-24T22:02:01Z",
    "events_url": "https://api.github.com/repos/go-delve/delve/issues/1768/events",
    "html_url": "https://github.com/go-delve/delve/issues/1768",
    "id": 527764064,
    "labels": [
      {
        "color": "207de5",
        "default": false,
        "description": null,
        "id": 315745546,
        "name": "area/proc",
        "node_id": "MDU6TGFiZWwzMTU3NDU1NDY=",
        "url": "https://api.github.com/repos/go-delve/delve/labels/area/proc"
      },
      {
        "color": "fc2929",
        "default": false,
        "description": null,
        "id": 101022900,
        "name": "kind/bug",
        "node_id": "MDU6TGFiZWwxMDEwMjI5MDA=",
        "url": "https://api.github.com/repos/go-delve/delve/labels/kind/bug"
      }
    ],
    "labels_url": "https://api.github.com/repos/go-delve/delve/issues/1768/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU1Mjc3NjQwNjQ=",
    "number": 1768,
    "repository_url": "https://api.github.com/repos/go-delve/delve",
    "state": "open",
    "title": "Failed to eval expression issue with field tags",
    "updated_at": "2020-01-07T06:22:50Z",
    "url": "https://api.github.com/repos/go-delve/delve/issues/1768",
    "user": {
      "avatar_url": "https://avatars1.githubusercontent.com/u/18277999?v=4",
      "events_url": "https://api.github.com/users/omcnoe/events{/privacy}",
      "followers_url": "https://api.github.com/users/omcnoe/followers",
      "following_url": "https://api.github.com/users/omcnoe/following{/other_user}",
      "gists_url": "https://api.github.com/users/omcnoe/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/omcnoe",
      "id": 18277999,
      "login": "omcnoe",
      "node_id": "MDQ6VXNlcjE4Mjc3OTk5",
      "organizations_url": "https://api.github.com/users/omcnoe/orgs",
      "received_events_url": "https://api.github.com/users/omcnoe/received_events",
      "repos_url": "https://api.github.com/users/omcnoe/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/omcnoe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/omcnoe/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/omcnoe"
    }
  },
  {
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "1. What version of Delve are you using (`dlv version`)?\r\nDelve Debugger\r\nVersion: 1.3.2\r\nBuild: 3c266810757cd4abafe46fc6c9203aeeef5e15bf\r\n\r\n2. What version of Go are you using? (`go version`)?\r\nGo 1.13.4\r\n\r\n3. What operating system and processor architecture are you using?\r\nwindows/amd64\r\n\r\n4. What did you do?\r\nRun the following app in debug mode:\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"runtime\"\r\n)\r\n\r\nfunc factorial(n int, withBreak bool) int {\r\n\tif withBreak {\r\n\t\truntime.Breakpoint()\r\n\t}\r\n\r\n\tif n == 0 {\r\n\t\treturn 1\r\n\t} else {\r\n\t\treturn n * factorial(n-1, withBreak)\r\n\t}\r\n}\r\n\r\nfunc main() {\r\n\tfactorial(10, false)\r\n\tfmt.Println(\"the end\")\r\n}\r\n```\r\n\r\nThen run the following commands in delve:\r\n```\r\nb main.go:16\r\ncond 1 factorial(n, false) == 6\r\nc\r\n```\r\n\r\n5. What did you expect to see?\r\nI'd expect the execution to stop at the breakpoint when the condition is met.\r\n\r\n6. What did you see instead?\r\n```\r\nCommand failed: error evaluating expression: function calls not allowed without using 'call'\r\n```",
    "closed_at": null,
    "comments": 0,
    "comments_url": "https://api.github.com/repos/go-delve/delve/issues/1766/comments",
    "created_at": "2019-11-22T07:34:45Z",
    "events_url": "https://api.github.com/repos/go-delve/delve/issues/1766/events",
    "html_url": "https://github.com/go-delve/delve/issues/1766",
    "id": 527036179,
    "labels": [
      {
        "color": "207de5",
        "default": false,
        "description": null,
        "id": 315745546,
        "name": "area/proc",
        "node_id": "MDU6TGFiZWwzMTU3NDU1NDY=",
        "url": "https://api.github.com/repos/go-delve/delve/labels/area/proc"
      },
      {
        "color": "0052cc",
        "default": false,
        "description": null,
        "id": 315745668,
        "name": "kind/enhancement",
        "node_id": "MDU6TGFiZWwzMTU3NDU2Njg=",
        "url": "https://api.github.com/repos/go-delve/delve/labels/kind/enhancement"
      }
    ],
    "labels_url": "https://api.github.com/repos/go-delve/delve/issues/1766/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU1MjcwMzYxNzk=",
    "number": 1766,
    "repository_url": "https://api.github.com/repos/go-delve/delve",
    "state": "open",
    "title": "Function calls are not supported on conditional breakpoints",
    "updated_at": "2019-11-24T11:19:42Z",
    "url": "https://api.github.com/repos/go-delve/delve/issues/1766",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/607868?v=4",
      "events_url": "https://api.github.com/users/dlsniper/events{/privacy}",
      "followers_url": "https://api.github.com/users/dlsniper/followers",
      "following_url": "https://api.github.com/users/dlsniper/following{/other_user}",
      "gists_url": "https://api.github.com/users/dlsniper/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/dlsniper",
      "id": 607868,
      "login": "dlsniper",
      "node_id": "MDQ6VXNlcjYwNzg2OA==",
      "organizations_url": "https://api.github.com/users/dlsniper/orgs",
      "received_events_url": "https://api.github.com/users/dlsniper/received_events",
      "repos_url": "https://api.github.com/users/dlsniper/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/dlsniper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dlsniper/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/dlsniper"
    }
  },
  {
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "Go 1.14 uses a new system to preempt goroutines non-cooperatively by sending a SIGURG signal to its own threads. This necessitates [increased rigour in signal routing](https://github.com/go-delve/delve/pull/1752). We should verify that this doesn't expose latent bugs in the freebsd native backend before Go 1.14/Delve 1.4.0 is released.\r\n\r\ncc @rayrapetyan ",
    "closed_at": null,
    "comments": 2,
    "comments_url": "https://api.github.com/repos/go-delve/delve/issues/1754/comments",
    "created_at": "2019-11-12T11:10:17Z",
    "events_url": "https://api.github.com/repos/go-delve/delve/issues/1754/events",
    "html_url": "https://github.com/go-delve/delve/issues/1754",
    "id": 521484373,
    "labels": [],
    "labels_url": "https://api.github.com/repos/go-delve/delve/issues/1754/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU1MjE0ODQzNzM=",
    "number": 1754,
    "repository_url": "https://api.github.com/repos/go-delve/delve",
    "state": "open",
    "title": "proc/native/freebsd: verify compatiblity with current go-tip (which will become Go 1.14)",
    "updated_at": "2019-12-02T14:11:15Z",
    "url": "https://api.github.com/repos/go-delve/delve/issues/1754",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/303620?v=4",
      "events_url": "https://api.github.com/users/aarzilli/events{/privacy}",
      "followers_url": "https://api.github.com/users/aarzilli/followers",
      "following_url": "https://api.github.com/users/aarzilli/following{/other_user}",
      "gists_url": "https://api.github.com/users/aarzilli/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/aarzilli",
      "id": 303620,
      "login": "aarzilli",
      "node_id": "MDQ6VXNlcjMwMzYyMA==",
      "organizations_url": "https://api.github.com/users/aarzilli/orgs",
      "received_events_url": "https://api.github.com/users/aarzilli/received_events",
      "repos_url": "https://api.github.com/users/aarzilli/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/aarzilli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aarzilli/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/aarzilli"
    }
  },
  {
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "I think that `pkg/proc` has gotten way too big in scope, making it difficult to understand especially for those new to the project. I believe this clutter also makes it more complicated to add new arches and OSes. I propose we simplify `pkg/proc` by limiting its scope exclusively to low-level process manipulation, and move everything else into independent packages, and move any higher-level logic into `service/debugger`. As it stands right now, `pkg/proc` is aware of: low-level process execution / memory manipulation, DWARF logic (compilation units, line info, etc), various binary sections including moduledata, disassembly, variables and variable types, parsing the Go AST, the function call protocol, AND implementing other even lower-level backends.\r\n\r\nI propose that `pkg/proc` implement a simple interface which abstracts what backend we are using, and is only responsible for manipulation of the process execution and memory. All other functionality should be split up into independent packages, and used by a higher-level concept which would be the `debugger` package.\r\n\r\nThe logic that should be moved out into independent packages, as I see it, is as follows:\r\n\r\n- Variable eval / AST parsing code\r\n\r\nI think this logic can be implemented in its own package. Functions can take a `proc.MemReadWriter` in order to actually get the values from memory and turn them into something useful, but this shouldn't be a part of the `proc` package itself.\r\n\r\n- BinaryInfo\r\n\r\nA lot of this code is higher level than `proc` as it deals with parsing the various sections in the binary we need to gather info from in order to unwind the stack, read variables, etc. I think it can be moved into its own package and used by debugger instead of `proc`.\r\n\r\n- Stack unwinding\r\n\r\nI believe this can be implemented in `service/debugger` by taking advantage of the new packages above and low-level functionality provided by the `proc` package.\r\n\r\n- Next'ing, function call protocol and other high-level logic\r\n\r\nThis can be implemented by the `debugger` package as well. At a process level there is no concept of source code lines. This logic should be implemented at a higher level, leaving `proc` to implement _only_ the low-level functionality that the logic builds on top of.\r\n\r\n- Disassembly\r\n\r\nAgain, this is high level, this could be its own standalone package.\r\n\r\n- Breakpoints\r\n\r\nThe concept of breakpoints is only of use to the debugger, an actual process knows nothing about them. This concept should be moved higher up.\r\n\r\nI am creating this issue for awareness and discussion. At the time of writing there are also arch ports in play which this refactor would disrupt, so it should be completed after.",
    "closed_at": null,
    "comments": 4,
    "comments_url": "https://api.github.com/repos/go-delve/delve/issues/1750/comments",
    "created_at": "2019-11-08T19:41:40Z",
    "events_url": "https://api.github.com/repos/go-delve/delve/issues/1750/events",
    "html_url": "https://github.com/go-delve/delve/issues/1750",
    "id": 520199251,
    "labels": [
      {
        "color": "0052cc",
        "default": false,
        "description": null,
        "id": 315745646,
        "name": "kind/design",
        "node_id": "MDU6TGFiZWwzMTU3NDU2NDY=",
        "url": "https://api.github.com/repos/go-delve/delve/labels/kind/design"
      },
      {
        "color": "0052cc",
        "default": false,
        "description": null,
        "id": 315745676,
        "name": "kind/discussion",
        "node_id": "MDU6TGFiZWwzMTU3NDU2NzY=",
        "url": "https://api.github.com/repos/go-delve/delve/labels/kind/discussion"
      }
    ],
    "labels_url": "https://api.github.com/repos/go-delve/delve/issues/1750/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU1MjAxOTkyNTE=",
    "number": 1750,
    "repository_url": "https://api.github.com/repos/go-delve/delve",
    "state": "open",
    "title": "refactor: Simplify pkg/proc",
    "updated_at": "2020-01-01T18:00:51Z",
    "url": "https://api.github.com/repos/go-delve/delve/issues/1750",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/1314079?v=4",
      "events_url": "https://api.github.com/users/derekparker/events{/privacy}",
      "followers_url": "https://api.github.com/users/derekparker/followers",
      "following_url": "https://api.github.com/users/derekparker/following{/other_user}",
      "gists_url": "https://api.github.com/users/derekparker/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/derekparker",
      "id": 1314079,
      "login": "derekparker",
      "node_id": "MDQ6VXNlcjEzMTQwNzk=",
      "organizations_url": "https://api.github.com/users/derekparker/orgs",
      "received_events_url": "https://api.github.com/users/derekparker/received_events",
      "repos_url": "https://api.github.com/users/derekparker/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/derekparker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/derekparker/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/derekparker"
    }
  },
  {
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "At the moment delve waits for `rr record` to finish which happen when the inferior terminates. \r\nAbility to stop recording without program termination is useful for long running servers which do not exit. [It looks like](https://github.com/mozilla/rr/blob/master/src/RecordCommand.cc#L473) recording can be stopped by sending SIGTERM to rr.",
    "closed_at": null,
    "comments": 1,
    "comments_url": "https://api.github.com/repos/go-delve/delve/issues/1747/comments",
    "created_at": "2019-11-08T10:05:55Z",
    "events_url": "https://api.github.com/repos/go-delve/delve/issues/1747/events",
    "html_url": "https://github.com/go-delve/delve/issues/1747",
    "id": 519923908,
    "labels": [
      {
        "color": "0052cc",
        "default": false,
        "description": null,
        "id": 315745668,
        "name": "kind/enhancement",
        "node_id": "MDU6TGFiZWwzMTU3NDU2Njg=",
        "url": "https://api.github.com/repos/go-delve/delve/labels/kind/enhancement"
      }
    ],
    "labels_url": "https://api.github.com/repos/go-delve/delve/issues/1747/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU1MTk5MjM5MDg=",
    "number": 1747,
    "repository_url": "https://api.github.com/repos/go-delve/delve",
    "state": "open",
    "title": "Feature: add ability to stop mozilla rr recording",
    "updated_at": "2019-11-11T16:15:05Z",
    "url": "https://api.github.com/repos/go-delve/delve/issues/1747",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/38202?v=4",
      "events_url": "https://api.github.com/users/nd/events{/privacy}",
      "followers_url": "https://api.github.com/users/nd/followers",
      "following_url": "https://api.github.com/users/nd/following{/other_user}",
      "gists_url": "https://api.github.com/users/nd/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/nd",
      "id": 38202,
      "login": "nd",
      "node_id": "MDQ6VXNlcjM4MjAy",
      "organizations_url": "https://api.github.com/users/nd/orgs",
      "received_events_url": "https://api.github.com/users/nd/received_events",
      "repos_url": "https://api.github.com/users/nd/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/nd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nd/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/nd"
    }
  },
  {
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "1. What version of Delve are you using (`dlv version`)?\r\n\r\n```\r\nDelve Debugger\r\nVersion: 1.2.0\r\nBuild: 4779218a8354d2facdbf2c48263c4144be330ca0\r\n```\r\n\r\n2. What version of Go are you using? (`go version`)?\r\n\r\n```\r\ngo version go1.12.9 linux/386\r\n```\r\n\r\n3. What operating system and processor architecture are you using?\r\n\r\n```\r\nLinux, x86_64\r\n```\r\n\r\n4. What did you do?\r\n\r\nDebugged the following program with a breakpoint at line 8\r\n\r\n```\r\npackage main\r\n\r\nfunc main() {\r\n\tv := 1\r\n\tclosure := func() {\r\n\t\tprintln(v)\r\n\t\tv := 2\r\n\t\tprintln(v) //break\r\n\t}\r\n\tclosure()\r\n\tprintln(v)\r\n}\r\n```\r\n\r\nExecuted the `locals` command when debugger reaches the breakpoint.\r\n\r\n5. What did you expect to see?\r\n\r\nThe `v=1` defined outside of the closure has DeclLine = 4.\r\n\r\n6. What did you see instead?\r\n\r\nThe `v=1` defined outside of the closure has DeclLine = 6.\r\n\r\nFull log: https://gist.github.com/nd/5fa605ac3e24fa42b35c7dc448998a5e.\r\n\r\n",
    "closed_at": null,
    "comments": 1,
    "comments_url": "https://api.github.com/repos/go-delve/delve/issues/1673/comments",
    "created_at": "2019-08-16T08:02:53Z",
    "events_url": "https://api.github.com/repos/go-delve/delve/issues/1673/events",
    "html_url": "https://github.com/go-delve/delve/issues/1673",
    "id": 481492728,
    "labels": [
      {
        "color": "0052cc",
        "default": false,
        "description": null,
        "id": 375989743,
        "name": "kind/upstream",
        "node_id": "MDU6TGFiZWwzNzU5ODk3NDM=",
        "url": "https://api.github.com/repos/go-delve/delve/labels/kind/upstream"
      }
    ],
    "labels_url": "https://api.github.com/repos/go-delve/delve/issues/1673/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU0ODE0OTI3Mjg=",
    "number": 1673,
    "repository_url": "https://api.github.com/repos/go-delve/delve",
    "state": "open",
    "title": "Wrong declLine inside a closure",
    "updated_at": "2019-08-17T07:21:52Z",
    "url": "https://api.github.com/repos/go-delve/delve/issues/1673",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/38202?v=4",
      "events_url": "https://api.github.com/users/nd/events{/privacy}",
      "followers_url": "https://api.github.com/users/nd/followers",
      "following_url": "https://api.github.com/users/nd/following{/other_user}",
      "gists_url": "https://api.github.com/users/nd/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/nd",
      "id": 38202,
      "login": "nd",
      "node_id": "MDQ6VXNlcjM4MjAy",
      "organizations_url": "https://api.github.com/users/nd/orgs",
      "received_events_url": "https://api.github.com/users/nd/received_events",
      "repos_url": "https://api.github.com/users/nd/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/nd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nd/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/nd"
    }
  },
  {
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "Hi, I'm Yevgeny Pats Founder of [Fuzzit](https://fuzzit.dev) - Continuous fuzzing as a service platform.\r\n\r\nWe have a free plan for OSS and I would be happy to contribute a PR if that's interesting.\r\nThe PR will include the following\r\n- [go-fuzz](https://github.com/dvyukov/go-fuzz) fuzzers (This is generic step not-connected to fuzzit)\r\n- Continuous Fuzzing of master branch which will generate new corpus and look for new crashes\r\n- Regression on every PR that will run the fuzzers through all the generated corpus and fixed crashes from previous step. This will prevent new or old bugs from crippling into master.\r\n\r\nYou can see our basic example [here](https://github.com/fuzzitdev/example-go) and you can see an example of \"in the wild\" integration [here](https://github.com/google/syzkaller).\r\n\r\nLet me know if this is something worth working on.\r\n\r\nCheers,\r\nYevgeny",
    "closed_at": null,
    "comments": 3,
    "comments_url": "https://api.github.com/repos/go-delve/delve/issues/1670/comments",
    "created_at": "2019-08-16T07:15:03Z",
    "events_url": "https://api.github.com/repos/go-delve/delve/issues/1670/events",
    "html_url": "https://github.com/go-delve/delve/issues/1670",
    "id": 481476681,
    "labels": [
      {
        "color": "0052cc",
        "default": false,
        "description": null,
        "id": 315745676,
        "name": "kind/discussion",
        "node_id": "MDU6TGFiZWwzMTU3NDU2NzY=",
        "url": "https://api.github.com/repos/go-delve/delve/labels/kind/discussion"
      },
      {
        "color": "0052cc",
        "default": false,
        "description": null,
        "id": 315745668,
        "name": "kind/enhancement",
        "node_id": "MDU6TGFiZWwzMTU3NDU2Njg=",
        "url": "https://api.github.com/repos/go-delve/delve/labels/kind/enhancement"
      }
    ],
    "labels_url": "https://api.github.com/repos/go-delve/delve/issues/1670/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU0ODE0NzY2ODE=",
    "number": 1670,
    "repository_url": "https://api.github.com/repos/go-delve/delve",
    "state": "open",
    "title": "Suggestion: Continuous Fuzzing",
    "updated_at": "2019-10-21T18:52:39Z",
    "url": "https://api.github.com/repos/go-delve/delve/issues/1670",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/16490766?v=4",
      "events_url": "https://api.github.com/users/yevgenypats/events{/privacy}",
      "followers_url": "https://api.github.com/users/yevgenypats/followers",
      "following_url": "https://api.github.com/users/yevgenypats/following{/other_user}",
      "gists_url": "https://api.github.com/users/yevgenypats/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yevgenypats",
      "id": 16490766,
      "login": "yevgenypats",
      "node_id": "MDQ6VXNlcjE2NDkwNzY2",
      "organizations_url": "https://api.github.com/users/yevgenypats/orgs",
      "received_events_url": "https://api.github.com/users/yevgenypats/received_events",
      "repos_url": "https://api.github.com/users/yevgenypats/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yevgenypats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yevgenypats/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yevgenypats"
    }
  },
  {
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "Please answer the following before submitting your issue:\r\n\r\n1. `Version: 1.2.0 Build: dd4fd5dc9cf5d45092f97f2ba376f3e69d7a5a8e`\r\n2. What version of Go are you using? `go version go1.12.7 linux/amd64`\r\n3. What operating system and processor architecture are you using? `linux x86_64`\r\n4. What did you do? \r\n\r\nAttempt to debug plugin from Goland. Using i.e. https://github.com/vladimirvivien/go-plugin-example.git (compile all plugins with `-gcflags='all=-N -l'`). Place breakpoints inside functions of plugin and inside main application functions.\r\n\r\n5. What did you expect to see?\r\n\r\nBreakpoints of main application work. Breakpoints inside plugins work.\r\n\r\n6. What did you see instead?\r\n\r\nBreakpoints of main application work. Plugin breakpoints are ignored.\r\n",
    "closed_at": null,
    "comments": 13,
    "comments_url": "https://api.github.com/repos/go-delve/delve/issues/1653/comments",
    "created_at": "2019-08-08T04:00:53Z",
    "events_url": "https://api.github.com/repos/go-delve/delve/issues/1653/events",
    "html_url": "https://github.com/go-delve/delve/issues/1653",
    "id": 478238640,
    "labels": [
      {
        "color": "0052cc",
        "default": false,
        "description": null,
        "id": 315745668,
        "name": "kind/enhancement",
        "node_id": "MDU6TGFiZWwzMTU3NDU2Njg=",
        "url": "https://api.github.com/repos/go-delve/delve/labels/kind/enhancement"
      }
    ],
    "labels_url": "https://api.github.com/repos/go-delve/delve/issues/1653/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU0NzgyMzg2NDA=",
    "number": 1653,
    "repository_url": "https://api.github.com/repos/go-delve/delve",
    "state": "open",
    "title": "Breakpoints in plugins are not working if set before plugin is loaded",
    "updated_at": "2019-08-19T16:45:11Z",
    "url": "https://api.github.com/repos/go-delve/delve/issues/1653",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/985805?v=4",
      "events_url": "https://api.github.com/users/akamensky/events{/privacy}",
      "followers_url": "https://api.github.com/users/akamensky/followers",
      "following_url": "https://api.github.com/users/akamensky/following{/other_user}",
      "gists_url": "https://api.github.com/users/akamensky/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/akamensky",
      "id": 985805,
      "login": "akamensky",
      "node_id": "MDQ6VXNlcjk4NTgwNQ==",
      "organizations_url": "https://api.github.com/users/akamensky/orgs",
      "received_events_url": "https://api.github.com/users/akamensky/received_events",
      "repos_url": "https://api.github.com/users/akamensky/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/akamensky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/akamensky/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/akamensky"
    }
  }
]